==================== START: architect-checklist ====================
# Architect 解決方案驗證檢查清單

此檢查清單作為 Architect 在開發執行前驗證技術設計和架構的綜合框架。Architect 應系統地逐項檢查，確保架構的穩健性、可擴展性、安全性，並與產品需求一致。

## 1. 需求一致性

### 1.1 功能性需求覆蓋

- [ ] 架構支援 PRD 中的所有功能性需求
- [ ] 所有 epics 和 stories 的技術方法皆已處理
- [ ] 已考量邊緣案例和效能情境
- [ ] 所有必要的整合皆已納入考量
- [ ] 技術架構支援使用者旅程

### 1.2 非功能性需求一致性

- [ ] 效能需求已透過特定解決方案處理
- [ ] 可擴展性考量已記錄並附帶方法
- [ ] 安全性需求具有相應的技術控制措施
- [ ] 可靠性和彈性方法已定義
- [ ] 合規性需求具有技術實作

### 1.3 技術限制遵循

- [ ] PRD 中的所有技術限制皆已滿足
- [ ] 已遵循平台/語言需求
- [ ] 已配合基礎架構限制
- [ ] 已處理第三方服務限制
- [ ] 已遵循組織技術標準

## 2. 架構基礎

### 2.1 架構清晰度

- [ ] 架構已透過清晰的圖表記錄
- [ ] 主要組件及其職責已定義
- [ ] 組件互動和相依性已對應
- [ ] 資料流程已清晰呈現
- [ ] 各組件的技術選擇已指定

### 2.2 關注點分離

- [ ] UI、業務邏輯和資料層之間有清晰的界線
- [ ] 組件之間的職責已明確劃分
- [ ] 組件之間的介面已明確定義
- [ ] 組件遵循單一職責原則
- [ ] 橫切關注點（日誌、驗證等）已妥善處理

### 2.3 設計模式與最佳實務

- [ ] 已採用適當的設計模式
- [ ] 已遵循業界最佳實務
- [ ] 已避免反模式
- [ ] 整體架構風格一致
- [ ] 模式使用已記錄並解釋

### 2.4 模組化與可維護性

- [ ] 系統已劃分為內聚、鬆散耦合的模組
- [ ] 組件可獨立開發和測試
- [ ] 變更可本地化至特定組件
- [ ] 程式碼組織有助於可發現性
- [ ] 架構專為 AI agent 實作設計

## 3. 技術堆疊與決策

### 3.1 技術選擇

- [ ] 所選技術滿足所有需求
- [ ] 技術版本已明確定義（非範圍）
- [ ] 技術選擇附有明確的理由
- [ ] 已考量的替代方案及其優缺點已記錄
- [ ] 所選堆疊組件能良好協同運作

### 3.2 前端架構

- [ ] UI 框架和函式庫已明確選定
- [ ] 狀態管理方法已定義
- [ ] 組件結構和組織已指定
- [ ] 響應式/自適應設計方法已概述
- [ ] 建置和打包策略已決定

### 3.3 後端架構

- [ ] API 設計和標準已定義
- [ ] 服務組織和界線清晰
- [ ] 驗證和授權方法已指定
- [ ] 錯誤處理策略已概述
- [ ] 後端擴展方法已定義

### 3.4 資料架構

- [ ] 資料模型已完整定義
- [ ] 資料庫技術已選定並附帶理由
- [ ] 資料存取模式已記錄
- [ ] 資料遷移/植入方法已指定
- [ ] 資料備份和復原策略已概述

## 4. 彈性與營運準備度

### 4.1 錯誤處理與彈性

- [ ] 錯誤處理策略全面
- [ ] 已適當定義重試策略
- [ ] 已為關鍵服務指定斷路器或備援機制
- [ ] 已定義優雅降級方法
- [ ] 系統可從部分故障中復原

### 4.2 監控與可觀察性

- [ ] 日誌策略已定義
- [ ] 監控方法已指定
- [ ] 已識別系統健康狀況的關鍵指標
- [ ] 警報閾值和策略已概述
- [ ] 已內建偵錯和疑難排解功能

### 4.3 效能與擴展

- [ ] 已識別並處理效能瓶頸
- [ ] 已適當定義快取策略
- [ ] 已指定負載平衡方法
- [ ] 已概述水平和垂直擴展策略
- [ ] 已提供資源規模建議

### 4.4 部署與 DevOps

- [ ] 部署策略已定義
- [ ] CI/CD 管線方法已概述
- [ ] 環境策略（開發、預備、生產）已指定
- [ ] Infrastructure as Code 方法已定義
- [ ] 已概述復原和回復程序

## 5. 安全性與合規性

### 5.1 驗證與授權

- [ ] 驗證機制已明確定義
- [ ] 授權模型已指定
- [ ] 若有需要，已概述角色型存取控制
- [ ] Session 管理方法已定義
- [ ] 已處理憑證管理

### 5.2 資料安全性

- [ ] 已指定資料加密方法（靜態和傳輸中）
- [ ] 已定義敏感資料處理程序
- [ ] 已概述資料保留和清除策略
- [ ] 若有需要，已處理備份加密
- [ ] 若有需要，已指定資料存取稽核軌跡

### 5.3 API 與服務安全性

- [ ] API 安全控制已定義
- [ ] 已指定速率限制和調節方法
- [ ] 輸入驗證策略已概述
- [ ] 已處理 CSRF/XSS 防護措施
- [ ] 已指定安全通訊協定

### 5.4 基礎架構安全性

- [ ] 網路安全設計已概述
- [ ] 已指定防火牆和安全群組組態
- [ ] 服務隔離方法已定義
- [ ] 已應用最小權限原則
- [ ] 安全監控策略已概述

## 6. 實作指南

### 6.1 編碼標準與實務

- [ ] 編碼標準已定義
- [ ] 文件需求已指定
- [ ] 測試期望已概述
- [ ] 程式碼組織原則已定義
- [ ] 命名慣例已指定

### 6.2 測試策略

- [ ] 單元測試方法已定義
- [ ] 整合測試策略已概述
- [ ] E2E 測試方法已指定
- [ ] 效能測試需求已概述
- [ ] 安全測試方法已定義

### 6.3 開發環境

- [ ] 本地開發環境設定已記錄
- [ ] 必要工具和組態已指定
- [ ] 開發工作流程已概述
- [ ] 原始碼控制實務已定義
- [ ] 相依性管理方法已指定

### 6.4 技術文件

- [ ] API 文件標準已定義
- [ ] 架構文件需求已指定
- [ ] 程式碼文件期望已概述
- [ ] 已包含系統圖表和視覺化內容
- [ ] 已包含關鍵選擇的決策記錄

## 7. 相依性與整合管理

### 7.1 外部相依性

- [ ] 所有外部相依性皆已識別
- [ ] 相依性的版本控制策略已定義
- [ ] 已為關鍵相依性指定備援方法
- [ ] 已處理授權影響
- [ ] 更新和修補策略已概述

### 7.2 內部相依性

- [ ] 組件相依性已清晰對應
- [ ] 已處理建置順序相依性
- [ ] 已識別共用服務和公用程式
- [ ] 已消除循環相依性
- [ ] 內部組件的版本控制策略已定義

### 7.3 第三方整合

- [ ] 所有第三方整合皆已識別
- [ ] 整合方法已定義
- [ ] 已處理與第三方的驗證
- [ ] 已指定整合失敗的錯誤處理
- [ ] 已考量速率限制和配額

## 8. AI AGENT 實作適用性

### 8.1 AI Agents 的模組化

- [ ] 組件大小適合 AI agent 實作
- [ ] 組件之間的相依性已最小化
- [ ] 組件之間的清晰介面已定義
- [ ] 組件具有單一、明確定義的職責
- [ ] 檔案和程式碼組織已針對 AI agent 理解進行優化

### 8.2 清晰度與可預測性

- [ ] 模式一致且可預測
- [ ] 複雜邏輯已分解為更簡單的步驟
- [ ] 架構避免過於取巧或晦澀的方法
- [ ] 已為不熟悉的模式提供範例
- [ ] 組件職責明確清晰

### 8.3 實作指南

- [ ] 已提供詳細的實作指南
- [ ] 程式碼結構範本已定義
- [ ] 特定實作模式已記錄
- [ ] 已識別常見陷阱並提供解決方案
- [ ] 在有幫助時提供類似實作的參考

### 8.4 錯誤預防與處理

- [ ] 設計減少實作錯誤的機會
- [ ] 驗證和錯誤檢查方法已定義
- [ ] 在可能的情況下納入自我修復機制
- [ ] 測試模式已明確定義
- [ ] 已提供偵錯指南

==================== END: architect-checklist ====================


==================== START: change-checklist ====================
# 變更導航檢查清單

**目的：** 在 BMAD 工作流程中發現重大變更（轉向、技術問題、需求遺漏、story 失敗）時，系統性地引導選定的 Agent 和使用者完成所需的分析和規劃。

**指示：** 與使用者一同檢閱每個項目。標記 `[x]` 表示完成/確認，`[N/A]` 表示不適用，或為討論點新增備註。

---

## 1. 了解觸發點與情境

- [ ] **識別觸發 Story：** 清楚識別揭露問題的 story (或多個 stories)。
- [ ] **定義問題：** 精確闡述核心問題。
  - [ ] 是否為技術限制/死胡同？
  - [ ] 是否為新發現的需求？
  - [ ] 是否為對現有需求的根本誤解？
  - [ ] 是否為基於回饋或新資訊的必要轉向？
  - [ ] 是否為需要新方法的失敗/放棄的 story？
- [ ] **評估初步影響：** 描述立即觀察到的後果（例如，進度受阻、功能不正確、技術不可行）。
- [ ] **收集證據：** 記錄任何支援問題定義的特定日誌、錯誤訊息、使用者回饋或分析。

## 2. Epic 影響評估

- [ ] **分析目前 Epic：**
  - [ ] 包含觸發 story 的目前 epic 是否仍可完成？
  - [ ] 目前 epic 是否需要修改（story 變更、新增、移除）？
  - [ ] 目前 epic 是否應放棄或從根本上重新定義？
- [ ] **分析未來 Epics：**
  - [ ] 檢閱所有剩餘的已規劃 epics。
  - [ ] 此問題是否需要變更未來 epics 中的已規劃 stories？
  - [ ] 此問題是否會使任何未來 epics 失效？
  - [ ] 此問題是否需要建立全新的 epics？
  - [ ] 未來 epics 的順序/優先順序是否應變更？
- [ ] **總結 Epic 影響：** 簡要記錄對專案 epic 結構和流程的整體影響。

## 3. 產出物衝突與影響分析

- [ ] **檢閱 PRD：**
  - [ ] 此問題是否與 PRD 中陳述的核心目標或需求衝突？
  - [ ] PRD 是否需要根據新的理解進行澄清或更新？
- [ ] **檢閱架構文件：**
  - [ ] 此問題是否與已記錄的架構（組件、模式、技術選擇）衝突？
  - [ ] 特定組件/圖表/章節是否受到影響？
  - [ ] 技術清單是否需要更新？
  - [ ] 資料模型或結構描述是否需要修訂？
  - [ ] 外部 API 整合是否受到影響？
- [ ] **檢閱前端規格（若適用）：**
  - [ ] 此問題是否與前端架構、組件庫選擇或 UI/UX 設計衝突？
  - [ ] 特定前端組件或使用者流程是否受到影響？
- [ ] **檢閱其他產出物（若適用）：**
  - [ ] 考量對部署腳本、IaC、監控設定等的影響。
- [ ] **總結產出物影響：** 列出所有需要更新的產出物以及所需的變更性質。

## 4. 前進路徑評估

- [ ] **選項 1：直接調整/整合：**
  - [ ] 此問題是否可以透過在現有計畫中修改/新增未來 stories 來解決？
  - [ ] 定義這些調整的範圍和性質。
  - [ ] 評估此路徑的可行性、投入和風險。
- [ ] **選項 2：潛在復原：**
  - [ ] 回復已完成的 stories 是否能顯著簡化問題的處理？
  - [ ] 識別要考量回復的特定 stories/commits。
  - [ ] 評估回復所需的投入。
  - [ ] 評估回復的影響（損失的工作、資料影響）。
  - [ ] 比較與直接調整的淨效益/成本。
- [ ] **選項 3：PRD MVP 檢閱與潛在重新界定範圍：**
  - [ ] 考量到問題和限制，原始 PRD MVP 是否仍可實現？
  - [ ] MVP 範圍是否需要縮減（移除功能/epics）？
  - [ ] 核心 MVP 目標是否需要修改？
  - [ ] 是否需要替代方法來達成原始 MVP 的意圖？
  - [ ] **極端情況：** 此問題是否需要根本性的重新規劃，或可能需要新的 PRD V2（由 PM 處理）？
- [ ] **選擇建議路徑：** 根據評估，就最可行的前進路徑達成共識。

## 5. Sprint 變更提案組件

_(確保先前章節中所有已達成共識的點都已納入提案中)_

- [ ] **已識別問題摘要：** 清晰、簡潔的問題陳述。
- [ ] **Epic 影響摘要：** epics 如何受到影響。
- [ ] **產出物調整需求：** 需要變更的文件清單。
- [ ] **建議前進路徑：** 選擇的解決方案及其理由。
- [ ] **PRD MVP 影響：** 範圍/目標的變更（若有）。
- [ ] **高階行動計畫：** stories/更新的後續步驟。
- [ ] **Agent 交接計畫：** 識別所需角色（PM、Arch、Design Arch、PO）。

## 6. 最終檢閱與交接

- [ ] **檢閱檢查清單：** 確認所有相關項目皆已討論。
- [ ] **檢閱 Sprint 變更提案：** 確保其準確反映討論和決策。
- [ ] **使用者核准：** 取得使用者對提案的明確核准。
- [ ] **確認後續步驟：** 重申交接計畫以及特定 agents 後續將採取的行動。

---

==================== END: change-checklist ====================


==================== START: frontend-architecture-checklist ====================
# 前端架構文件檢閱檢查清單

## 目的
此檢查清單供 Design Architect 在完成「前端架構模式」並填寫 `front-end-architecture-tmpl.txt` (或 `.md`) 文件後使用。它確保所有章節都已全面涵蓋並符合品質標準，然後再最終定案。

---

## I. 引言

- [ ] 引言中所有 `{Project Name}` 是否已正確填寫？
- [ ] 主要架構文件的連結是否存在且正確？
- [ ] UI/UX 規格的連結是否存在且正確？
- [ ] 主要設計檔案（Figma、Sketch 等）的連結是否存在且正確？
- [ ] 若適用且可用，是否包含已部署的 Storybook / 組件展示的連結？

## II. 整體前端理念與模式

- [ ] 所選的框架與核心函式庫是否已清楚陳述，並與主要架構文件一致？
- [ ] 組件架構（例如，Atomic Design、Presentational/Container）是否已清楚描述？
- [ ] 狀態管理策略（例如，Redux Toolkit、Zustand）是否已在高層次上清楚描述？
- [ ] 資料流程（例如，Unidirectional）是否已清楚解釋？
- [ ] 樣式設定方法（例如，CSS Modules、Tailwind CSS）是否已明確定義？
- [ ] 是否列出將採用的關鍵設計模式（例如，Provider、Hooks）？
- [ ] 此章節是否與主要架構文件中的「明確技術堆疊選擇」一致？
- [ ] 是否考量整體系統架構（monorepo/polyrepo、後端服務）的影響？

## III. 詳細前端目錄結構

- [ ] 是否提供代表前端應用程式資料夾結構的 ASCII 圖？
- [ ] 圖表是否清晰、準確，並反映所選的框架/模式？
- [ ] 是否強調組織組件、頁面、服務、狀態、樣式等的慣例？
- [ ] 解釋特定慣例或結構理由的備註是否存在且清晰？

## IV. 組件細分與實作細節

### 組件命名與組織
- [ ] 是否描述組件命名慣例（例如，PascalCase）？
- [ ] 檔案系統中組件的組織是否已清楚解釋（若需要，可重申目錄結構中的內容）？

### 組件規格範本
- [ ] 「組件規格範本」本身是否完整且定義明確？
  - [ ] 是否包含以下欄位：目的、原始檔案、視覺參考？
  - [ ] 是否包含 Props 的表格結構（名稱、類型、必要、預設值、描述）？
  - [ ] 是否包含內部狀態的表格結構（變數、類型、初始值、描述）？
  - [ ] 是否包含關鍵 UI 元素/結構的章節（文字或偽 HTML）？
  - [ ] 是否包含處理/發出的事件的章節？
  - [ ] 是否包含觸發的動作（狀態管理、API 呼叫）的章節？
  - [ ] 是否包含樣式設定備註的章節？
  - [ ] 是否包含無障礙備註的章節？
- [ ] 是否明確陳述此範本應用於大多數特定功能的組件？

### 基礎/共用組件（若有預先指定）
- [ ] 若有指定任何基礎/共用 UI 組件，它們是否遵循「組件規格範本」？
- [ ] 預先指定這些組件的理由是否清晰？

## V. 深入狀態管理

- [ ] 所選的狀態管理解決方案是否已重申，並簡要提供理由（若主要架構文件中未完整涵蓋）？
- [ ] Store 結構/Slices 的慣例是否已明確定義（例如，位置、基於功能的 slices）？
- [ ] 若提供核心 Slice 範例（例如，`sessionSlice`）：
  - [ ] 其目的是否清晰？
  - [ ] 其 State Shape 是否已定義（例如，使用 TypeScript interface）？
  - [ ] 其關鍵 Reducers/Actions 是否已列出？
- [ ] 是否提供 Feature Slice 範本，概述要填寫的目的、state shape 和關鍵 reducers/actions？
- [ ] 是否註明關鍵 Selectors 的慣例（例如，使用 `createSelector`）？
- [ ] 是否提供任何核心 slices 的關鍵 Selectors 範例？
- [ ] 是否描述關鍵 Actions / Reducers / Thunks（尤其是非同步）的慣例？
- [ ] 是否提供核心 Action/Thunk 範例（例如，`authenticateUser`），詳細說明其目的和 dispatch 流程？
- [ ] 是否為特定功能的非同步操作提供 Feature Action/Thunk 範本？

## VI. API 互動層

- [ ] HTTP Client 設定是否已詳細說明（例如，Axios instance、Fetch wrapper、base URL、預設標頭、攔截器）？
- [ ] Service Definitions 慣例是否已解釋？
- [ ] 是否提供服務範例（例如，`userService.ts`），包含其目的和範例函式？
- [ ] API 呼叫的全域錯誤處理是否已描述（例如，toast 通知、全域錯誤狀態）？
- [ ] 是否提供組件內特定錯誤處理的指南？
- [ ] API 呼叫的任何客戶端重試邏輯是否已詳細說明並設定？

## VII. 路由策略

- [ ] 所選的路由函式庫是否已陳述？
- [ ] 是否提供路由定義表？
  - [ ] 是否包含每個路由的路徑模式、組件/頁面、保護狀態和備註？
  - [ ] 是否列出所有關鍵應用程式路由？
- [ ] 保護路由的驗證守衛機制是否已描述？
- [ ] 授權守衛機制（若適用於角色/權限）是否已描述？

## VIII. 建置、打包與部署

- [ ] 關鍵建置腳本（例如，`npm run build`）是否已列出並解釋其目的？
- [ ] 是否描述在建置過程中針對不同環境處理環境變數的方式？
- [ ] Code Splitting 策略是否已詳細說明（例如，基於路由、基於組件）？
- [ ] Tree Shaking 是否已確認或解釋？
- [ ] Lazy Loading 策略（針對組件、圖片、路由）是否已概述？
- [ ] 是否提及建置工具的 Minification & Compression？
- [ ] 目標部署平台（例如，Vercel、Netlify）是否已指定？
- [ ] 部署觸發器（例如，透過 CI/CD 的 Git push）是否已描述，並參考主要 CI/CD 管線？
- [ ] 靜態資產的資產快取策略（CDN/瀏覽器）是否已概述？

## IX. 前端測試策略

- [ ] 主要測試策略文件/章節的連結是否存在且正確？
- [ ] 針對組件測試：
  - [ ] 範圍是否已明確定義？
  - [ ] 工具是否已列出？
  - [ ] 測試重點（渲染、props、互動）是否清晰？
  - [ ] 測試檔案的位置是否已指定？
- [ ] 針對 UI 整合/流程測試：
  - [ ] 範圍（多個組件之間的互動）是否清晰？
  - [ ] 工具是否已列出（可與組件測試相同）？
  - [ ] 這些測試的重點是否清晰？
- [ ] 針對端對端 UI 測試：
  - [ ] 工具（例如，Playwright、Cypress）是否已從主要策略中重申？
  - [ ] 範圍（前端的關鍵使用者旅程）是否已定義？
  - [ ] UI E2E 測試的測試資料管理是否已處理？

## X. 無障礙 (AX) 實作細節

- [ ] 是否強調使用 Semantic HTML？
- [ ] 是否提供 ARIA 實作指南（自訂組件的角色、狀態、屬性）？
- [ ] 是否陳述鍵盤導覽需求（所有互動元素皆可聚焦/操作）？
- [ ] 焦點管理（針對強制回應視窗、動態內容）是否已處理？
- [ ] AX 測試工具（例如，Axe DevTools、Lighthouse）是否已列出？
- [ ] 此章節是否與 UI/UX 規格中的 AX 需求一致？

## XI. 效能考量

- [ ] 圖片優化（格式、響應式圖片、延遲載入）是否已討論？
- [ ] Code Splitting & Lazy Loading（對感知效能的影響）是否在必要時重申？
- [ ] 是否提及最小化重新渲染的技術（例如，`React.memo`）？
- [ ] 是否考量事件處理常式的 Debouncing/Throttling？
- [ ] 若適用，是否提及長列表/大型資料集的虛擬化？
- [ ] 若相關，是否討論客戶端快取策略（瀏覽器快取、service workers）？
- [ ] 效能監控工具（例如，Lighthouse、DevTools）是否已列出？

## XII. 變更日誌
- [ ] 變更日誌表格是否存在並已初始化？
- [ ] 隨著文件的演進，是否有更新變更日誌的流程？

---

## 最終檢閱簽核

- [ ] 所有預留位置（例如，`{Project Name}`、`{例如，...}`）是否已填寫或在適當情況下移除？
- [ ] Design Architect 是否已檢閱文件的清晰度、一致性和完整性？
- [ ] 所有連結的文件（主要架構、UI/UX 規格）是否已最終定案或足夠穩定，可供此文件參考？
- [ ] 文件是否準備好與開發團隊分享？

==================== END: frontend-architecture-checklist ====================


==================== START: pm-checklist ====================
# Product Manager (PM) 需求檢查清單

此檢查清單作為一個綜合框架，以確保產品需求文件 (PRD) 和 Epic 定義完整、結構良好，且範圍適當地界定於 MVP 開發。PM 應在產品定義過程中系統地逐項檢查。

## 1. 問題定義與情境

### 1.1 問題陳述
- [ ] 清楚闡述正在解決的問題
- [ ] 識別遇到問題的對象
- [ ] 解釋為何解決此問題很重要
- [ ] 量化問題影響（若可能）
- [ ] 與現有解決方案的差異化

### 1.2 業務目標與成功指標
- [ ] 已定義具體、可衡量的業務目標
- [ ] 已建立明確的成功指標和 KPI
- [ ] 指標與使用者和業務價值相關聯
- [ ] 已識別基準測量值（若適用）
- [ ] 已指定達成目標的時間範圍

### 1.3 使用者研究與洞察
- [ ] 目標使用者畫像已明確定義
- [ ] 使用者需求和痛點已記錄
- [ ] 使用者研究結果已摘要（若可用）
- [ ] 已包含競爭分析
- [ ] 已提供市場情境

## 2. MVP 範圍定義

### 2.1 核心功能
- [ ] 必要功能與非必要功能已明確區分
- [ ] 功能直接解決已定義的問題陳述
- [ ] 每個 Epic 皆與特定使用者需求相關聯
- [ ] 功能和 Stories 從使用者角度描述
- [ ] 已定義成功的最低需求

### 2.2 範圍界限
- [ ] 清楚闡述超出範圍的內容
- [ ] 已包含未來增強功能章節
- [ ] 範圍決策的理由已記錄
- [ ] MVP 在最小化功能的同時最大化學習
- [ ] 範圍已多次檢閱和完善

### 2.3 MVP 驗證方法
- [ ] 已定義測試 MVP 成功的方法
- [ ] 已規劃初步使用者回饋機制
- [ ] 已指定超越 MVP 的標準
- [ ] MVP 的學習目標已闡述
- [ ] 已設定時程預期

## 3. 使用者體驗需求

### 3.1 使用者旅程與流程
- [ ] 主要使用者流程已記錄
- [ ] 每個流程的進入點和離開點已識別
- [ ] 決策點和分支已對應
- [ ] 關鍵路徑已突顯
- [ ] 已考量邊緣案例

### 3.2 可用性需求
- [ ] 無障礙考量已記錄
- [ ] 平台/裝置相容性已指定
- [ ] 從使用者角度定義的效能預期
- [ ] 錯誤處理和復原方法已概述
- [ ] 使用者回饋機制已識別

### 3.3 UI 需求
- [ ] 資訊架構已概述
- [ ] 關鍵 UI 組件已識別
- [ ] 視覺設計指南已參考（若適用）
- [ ] 內容需求已指定
- [ ] 高階導覽結構已定義

## 4. 功能性需求

### 4.1 功能完整性
- [ ] MVP 所需的所有功能皆已記錄
- [ ] 功能具有清晰、以使用者為中心的描述
- [ ] 功能優先順序/重要性已標示
- [ ] 需求可測試且可驗證
- [ ] 功能之間的相依性已識別

### 4.2 需求品質
- [ ] 需求具體且明確
- [ ] 需求著重於「什麼」而非「如何」
- [ ] 需求使用一致的術語
- [ ] 複雜需求已分解為更簡單的部分
- [ ] 技術術語已最小化或解釋

### 4.3 User Stories 與 Acceptance Criteria
- [ ] Stories 遵循一致的格式
- [ ] Acceptance criteria 可測試
- [ ] Stories 大小適當（不會過大）
- [ ] Stories 在可能的情況下獨立
- [ ] Stories 包含必要的情境
- [ ] 相關後端/資料 stories 的 ACs 中已定義本地可測試性需求（例如，透過 CLI）

## 5. 非功能性需求

### 5.1 效能需求
- [ ] 回應時間預期已定義
- [ ] 吞吐量/容量需求已指定
- [ ] 可擴展性需求已記錄
- [ ] 資源使用限制已識別
- [ ] 負載處理預期已設定

### 5.2 安全性與合規性
- [ ] 資料保護需求已指定
- [ ] 驗證/授權需求已定義
- [ ] 合規性需求已記錄
- [ ] 安全測試需求已概述
- [ ] 隱私考量已處理

### 5.3 可靠性與彈性
- [ ] 可用性需求已定義
- [ ] 備份和復原需求已記錄
- [ ] 容錯預期已設定
- [ ] 錯誤處理需求已指定
- [ ] 維護和支援考量已包含

### 5.4 技術限制
- [ ] 平台/技術限制已記錄
- [ ] 整合需求已概述
- [ ] 第三方服務相依性已識別
- [ ] 基礎架構需求已指定
- [ ] 開發環境需求已識別

## 6. EPIC 與 STORY 結構

### 6.1 Epic 定義
- [ ] Epics 代表內聚的功能單元
- [ ] Epics 著重於使用者/業務價值交付
- [ ] Epic 目標已清楚闡述
- [ ] Epics 大小適合增量交付
- [ ] Epic 順序和相依性已識別

### 6.2 Story 細分
- [ ] Stories 已細分為適當大小
- [ ] Stories 具有清晰、獨立的價值
- [ ] Stories 包含適當的 acceptance criteria
- [ ] Story 相依性和順序已記錄
- [ ] Stories 與 epic 目標一致

### 6.3 第一個 Epic 完整性
- [ ] 第一個 epic 包含所有必要的設定步驟
- [ ] 專案框架和初始化已處理
- [ ] 核心基礎架構設定已包含
- [ ] 開發環境設定已處理
- [ ] 本地可測試性已早期建立

## 7. 技術指南

### 7.1 架構指南
- [ ] 已提供初步架構方向
- [ ] 技術限制已清楚傳達
- [ ] 整合點已識別
- [ ] 效能考量已突顯
- [ ] 安全性需求已闡述
- [ ] 已標記已知的高度複雜或具技術風險的領域，以進行架構深入探討

### 7.2 技術決策框架
- [ ] 已提供技術選擇的決策標準
- [ ] 關鍵決策的權衡已闡述
- [ ] 已記錄選擇主要方法而非已考量替代方案的理由（針對關鍵設計/功能選擇）
- [ ] 不可協商的技術需求已突顯
- [ ] 需要技術調查的領域已識別
- [ ] 已提供技術債務處理方法的指南

### 7.3 實作考量
- [ ] 已提供開發方法指南
- [ ] 測試需求已闡述
- [ ] 部署預期已設定
- [ ] 監控需求已識別
- [ ] 文件需求已指定

## 8. 跨功能需求

### 8.1 資料需求
- [ ] 資料實體和關聯已識別
- [ ] 資料儲存需求已指定
- [ ] 資料品質需求已定義
- [ ] 資料保留策略已識別
- [ ] 資料遷移需求已處理（若適用）
- [ ] 結構描述變更已迭代規劃，並與需要它們的 stories 相關聯

### 8.2 整合需求
- [ ] 外部系統整合已識別
- [ ] API 需求已記錄
- [ ] 整合的驗證已指定
- [ ] 資料交換格式已定義
- [ ] 整合測試需求已概述

### 8.3 營運需求
- [ ] 部署頻率預期已設定
- [ ] 環境需求已定義
- [ ] 監控和警報需求已識別
- [ ] 支援需求已記錄
- [ ] 效能監控方法已指定

## 9. 清晰度與溝通

### 9.1 文件品質
- [ ] 文件使用清晰、一致的語言
- [ ] 文件結構良好且有組織
- [ ] 必要時定義技術術語
- [ ] 在有幫助時包含圖表/視覺化內容
- [ ] 文件已適當版本化

### 9.2 利害關係人一致性
- [ ] 關鍵利害關係人已識別
- [ ] 已納入利害關係人意見
- [ ] 已處理潛在的意見分歧領域
- [ ] 更新的溝通計畫已建立
- [ ] 核准流程已定義

## PRD 與 EPIC 驗證摘要

### 類別狀態
| 類別 | 狀態 | 重大問題 |
|----------|--------|----------------|
| 1. 問題定義與情境 | 通過/失敗/部分通過 | |
| 2. MVP 範圍定義 | 通過/失敗/部分通過 | |
| 3. 使用者體驗需求 | 通過/失敗/部分通過 | |
| 4. 功能性需求 | 通過/失敗/部分通過 | |
| 5. 非功能性需求 | 通過/失敗/部分通過 | |
| 6. Epic 與 Story 結構 | 通過/失敗/部分通過 | |
| 7. 技術指南 | 通過/失敗/部分通過 | |
| 8. 跨功能需求 | 通過/失敗/部分通過 | |
| 9. 清晰度與溝通 | 通過/失敗/部分通過 | |

### 重大缺失
- 列出所有在交接給 Architect 前必須解決的重大問題

### 建議
- 針對每個缺失提供具體的解決建議

### 最終決定
- **準備好交接給 ARCHITECT**：PRD 和 epics 全面、結構適當，並準備好進行架構設計。
- **需要完善**：需求文件需要額外工作以解決已識別的缺失。

==================== END: pm-checklist ====================


==================== START: po-master-checklist ====================
# Product Owner (PO) 驗證檢查清單

此檢查清單作為 Product Owner 在開發執行前驗證完整 MVP 計畫的綜合框架。PO 應系統地逐項檢查，記錄合規狀態並註明任何缺失。

## 1. 專案設定與初始化

### 1.1 專案框架
- [ ] Epic 1 包含專案建立/初始化的明確步驟
- [ ] 若使用入門範本，則包含複製/設定的步驟
- [ ] 若從頭開始建置，則定義所有必要的框架步驟
- [ ] 已包含初始 README 或文件設定
- [ ] 已定義儲存庫設定和初始 commit 流程（若適用）

### 1.2 開發環境
- [ ] 本地開發環境設定已明確定義
- [ ] 必要工具和版本已指定（Node.js、Python 等）
- [ ] 已包含安裝相依性的步驟
- [ ] 已處理組態檔（dotenv、config 檔案等）
- [ ] 已包含開發伺服器設定

### 1.3 核心相依性
- [ ] 所有關鍵套件/函式庫皆在流程早期安裝
- [ ] 套件管理（npm、pip 等）已妥善處理
- [ ] 版本規格已適當定義
- [ ] 已註明相依性衝突或特殊需求

## 2. 基礎架構與部署順序

### 2.1 資料庫與資料儲存設定
- [ ] 資料庫選擇/設定在任何資料庫操作之前進行
- [ ] 結構描述定義在資料操作之前建立
- [ ] 若適用，已定義遷移策略
- [ ] 若需要，已包含種子資料或初始資料設定
- [ ] 資料庫存取模式和安全性已早期建立

### 2.2 API 與服務組態
- [ ] API 框架在實作端點之前設定
- [ ] 服務架構在實作服務之前建立
- [ ] 驗證框架在受保護路由之前設定
- [ ] Middleware 和通用公用程式在使用前建立

### 2.3 部署管線
- [ ] CI/CD 管線在任何部署動作之前建立
- [ ] Infrastructure as Code (IaC) 在使用前設定
- [ ] 環境組態（開發、預備、生產）已早期定義
- [ ] 部署策略在實作前定義
- [ ] 已處理復原程序或考量

### 2.4 測試基礎架構
- [ ] 測試框架在撰寫測試之前安裝
- [ ] 測試環境設定在測試實作之前進行
- [ ] Mock 服務或資料在測試前定義
- [ ] 測試公用程式或輔助程式在使用前建立

## 3. 外部相依性與整合

### 3.1 第三方服務
- [ ] 已識別必要服務的帳戶建立步驟
- [ ] 已定義 API 金鑰取得流程
- [ ] 已包含安全儲存憑證的步驟
- [ ] 已考量備援或離線開發選項

### 3.2 外部 APIs
- [ ] 與外部 APIs 的整合點已清楚識別
- [ ] 與外部服務的驗證已適當排序
- [ ] 已確認 API 限制或約束
- [ ] 已考量 API 故障的備份策略

### 3.3 基礎架構服務
- [ ] 雲端資源佈建已適當排序
- [ ] 已識別 DNS 或網域名稱註冊需求
- [ ] 若需要，已包含電子郵件或訊息服務設定
- [ ] CDN 或靜態資產託管設定在其使用前進行

## 4. 使用者/AGENT 職責劃分

### 4.1 使用者動作
- [ ] 使用者職責僅限於需要人工介入的部分
- [ ] 外部服務的帳戶建立已適當指派給使用者
- [ ] 購買或付款動作已正確指派給使用者
- [ ] 憑證提供已適當指派給使用者

### 4.2 Developer Agent 動作
- [ ] 所有與程式碼相關的任務皆指派給 developer agents
- [ ] 自動化流程已正確識別為 agent 職責
- [ ] 組態管理已適當指派
- [ ] 測試和驗證已指派給適當的 agents

## 5. 功能排序與相依性

### 5.1 功能相依性
- [ ] 相依於其他功能的功能已正確排序
- [ ] 共用組件在其使用前建置
- [ ] 使用者流程遵循邏輯進程
- [ ] 驗證功能在受保護路由/功能之前進行

### 5.2 技術相依性
- [ ] 較低層級的服務在較高層級的服務之前建置
- [ ] 函式庫和公用程式在其使用前建立
- [ ] 資料模型在其操作前定義
- [ ] API 端點在客戶端取用前定義

### 5.3 跨 Epic 相依性
- [ ] 後續 epics 建置於先前 epics 的功能之上
- [ ] 沒有 epic 需要後續 epics 的功能
- [ ] 早期 epics 中建立的基礎架構持續使用
- [ ] 維持增量價值交付

## 6. MVP 範圍一致性

### 6.1 PRD 目標一致性
- [ ] PRD 中定義的所有核心目標皆在 epics/stories 中處理
- [ ] 功能直接支援已定義的 MVP 目標
- [ ] 未包含超出 MVP 範圍的額外功能
- [ ] 關鍵功能已適當優先排序

### 6.2 使用者旅程完整性
- [ ] 所有關鍵使用者旅程皆已完整實作
- [ ] 已處理邊緣案例和錯誤情境
- [ ] 已包含使用者體驗考量
- [ ] 若有指定，已納入無障礙需求

### 6.3 技術需求滿足
- [ ] PRD 中的所有技術限制皆已處理
- [ ] 已納入非功能性需求
- [ ] 架構決策與指定限制一致
- [ ] 效能考量已適當處理

## 7. 風險管理與實用性

### 7.1 技術風險緩解
- [ ] 複雜或不熟悉的技術具有適當的學習/原型製作 stories
- [ ] 高風險組件具有明確的驗證步驟
- [ ] 存在針對具風險整合的備援策略
- [ ] 效能疑慮具有明確的測試/驗證

### 7.2 外部相依性風險
- [ ] 已確認並緩解第三方服務的風險
- [ ] 已處理 API 限制或約束
- [ ] 存在針對關鍵外部服務的備份策略
- [ ] 已考量外部服務的成本影響

### 7.3 時程實用性
- [ ] Story 複雜性和排序顯示出實際的時程
- [ ] 對外部因素的相依性已最小化或管理
- [ ] 在可能的情況下啟用平行工作
- [ ] 關鍵路徑已識別並優化

## 8. 文件與交接

### 8.1 開發者文件
- [ ] API 文件與實作同時建立
- [ ] 設定指示全面
- [ ] 架構決策已記錄
- [ ] 模式和慣例已記錄

### 8.2 使用者文件
- [ ] 若需要，已包含使用者指南或說明文件
- [ ] 已考量錯誤訊息和使用者回饋
- [ ] 新手上路流程已完整指定
- [ ] 若適用，已定義支援流程

## 9. POST-MVP 考量

### 9.1 未來增強功能
- [ ] MVP 與未來功能之間有明確區分
- [ ] 架構支援已規劃的未來增強功能
- [ ] 技術債務考量已記錄
- [ ] 可擴展性點已識別

### 9.2 回饋機制
- [ ] 若需要，已包含分析或使用情況追蹤
- [ ] 已考量使用者回饋收集
- [ ] 已處理監控和警報
- [ ] 已納入效能測量

## 驗證摘要

### 類別狀態
| 類別 | 狀態 | 重大問題 |
|----------|--------|----------------|
| 1. 專案設定與初始化 | 通過/失敗/部分通過 | |
| 2. 基礎架構與部署順序 | 通過/失敗/部分通過 | |
| 3. 外部相依性與整合 | 通過/失敗/部分通過 | |
| 4. 使用者/Agent 職責劃分 | 通過/失敗/部分通過 | |
| 5. 功能排序與相依性 | 通過/失敗/部分通過 | |
| 6. MVP 範圍一致性 | 通過/失敗/部分通過 | |
| 7. 風險管理與實用性 | 通過/失敗/部分通過 | |
| 8. 文件與交接 | 通過/失敗/部分通過 | |
| 9. Post-MVP 考量 | 通過/失敗/部分通過 | |

### 重大缺失
- 列出所有在核准前必須解決的重大問題

### 建議
- 針對每個缺失提供具體的解決建議

### 最終決定
- **已核准**：計畫全面、排序適當，並準備好實作。
- **已拒絕**：計畫需要修訂以解決已識別的缺失。

==================== END: po-master-checklist ====================


==================== START: story-dod-checklist ====================
# Story Definition of Done (DoD) 檢查清單

## Developer Agent 指示：

在將 story 標記為「檢閱」之前，請逐項檢查此清單中的每個項目。報告每個項目的狀態（例如，[x] 完成，[ ] 未完成，[N/A] 不適用），並在必要時提供簡要評論。

## 檢查清單項目：

1.  **需求滿足：**

    - [ ] story 中指定的所有功能性需求皆已實作。
    - [ ] story 中定義的所有 acceptance criteria 皆已滿足。

2.  **編碼標準與專案結構：**

    - [ ] 所有新增/修改的程式碼嚴格遵守 `Operational Guidelines`。
    - [ ] 所有新增/修改的程式碼與 `Project Structure`（檔案位置、命名等）一致。
    - [ ] 遵守 `Tech Stack` 中使用的技術/版本（若 story 引入或修改技術使用）。
    - [ ] 遵守 `Api Reference` 和 `Data Models`（若 story 涉及 API 或資料模型變更）。
    - [ ] 已針對新增/修改的程式碼應用基本安全最佳實務（例如，輸入驗證、適當的錯誤處理、無硬式編碼的密鑰）。
    - [ ] 未引入新的 linter 錯誤或警告。
    - [ ] 必要時程式碼已妥善註解（澄清複雜邏輯，而非明顯陳述）。

3.  **測試：**

    - [ ] 已根據 story 和 `Operational Guidelines` 測試策略實作所有必要的單元測試。
    - [ ] 已根據 story 和 `Operational Guidelines` 測試策略實作所有必要的整合測試（若適用）。
    - [ ] 所有測試（單元、整合、E2E 若適用）皆成功通過。
    - [ ] 測試覆蓋率符合專案標準（若有定義）。

4.  **功能性與驗證：**

    - [ ] 開發者已手動驗證功能（例如，本地執行應用程式、檢查 UI、測試 API 端點）。
    - [ ] 已考量邊緣案例和潛在錯誤情況並妥善處理。

5.  **Story 管理：**
    - [ ] story 檔案中的所有任務皆已標記為完成。
    - [ ] 開發過程中做出的任何澄清或決策皆已記錄在 story 檔案中或適當連結。
    - [ ] story 總結部分已完成，包含與下一個 story 或整體專案相關的變更或資訊備註、開發期間主要使用的 agent 模型，以及任何變更的變更日誌皆已妥善更新。
6.  **相依性、建置與組態：**

    - [ ] 專案成功建置且無錯誤。
    - [ ] 專案 linting 通過。
    - [ ] 新增的任何相依性皆已在 story 需求中預先核准，或在開發期間由使用者明確核准（核准已記錄在 story 檔案中）。
    - [ ] 若新增相依性，則已記錄在適當的專案檔案中（例如，`package.json`、`requirements.txt`）並附帶理由。
    - [ ] 新增且已核准的相依性未引入已知的安全漏洞。
    - [ ] 若 story 引入新的環境變數或組態，則已記錄並安全處理。

7.  **文件（若適用）：**
    - [ ] 新的公開 APIs 或複雜邏輯的相關內嵌程式碼文件（例如，JSDoc、TSDoc、Python docstrings）已完成。
    - [ ] 若變更影響使用者，則已更新使用者導向文件。
    - [ ] 若進行重大架構變更，則已更新技術文件（例如，READMEs、系統圖表）。

## 最終確認：

- [ ] 我，Developer Agent，確認上述所有適用項目皆已處理。

==================== END: story-dod-checklist ====================


==================== START: story-draft-checklist ====================
# Story 草稿檢查清單

Scrum Master 應使用此檢查清單來驗證每個 story 是否包含足夠的情境供 developer agent 成功實作，同時假設 dev agent 具有合理的能力來解決問題。

## 1. 目標與情境清晰度

- [ ] Story 目標/目的已清楚陳述
- [ ] 與 epic 目標的關係明顯
- [ ] 已解釋 story 如何融入整體系統流程
- [ ] 已識別對先前 stories 的相依性（若適用）
- [ ] 業務情境和價值清晰

## 2. 技術實作指南

- [ ] 已識別要建立/修改的關鍵檔案（不一定詳盡無遺）
- [ ] 已提及此 story 特別需要的技術
- [ ] 關鍵 APIs 或介面已充分描述
- [ ] 已參考必要的資料模型或結構
- [ ] 已列出必要的環境變數（若適用）
- [ ] 已註明標準編碼模式的任何例外情況

## 3. 參考有效性

- [ ] 對外部文件的參考指向特定的相關章節
- [ ] 已摘要先前 stories 的關鍵資訊（不僅僅是參考）
- [ ] 已提供參考為何相關的情境
- [ ] 參考使用一致的格式（例如，`docs/filename.md#section`）

## 4. 自我包含評估

- [ ] 已包含所需的核心資訊（不過度依賴外部文件）
- [ ] 隱含的假設已明確化
- [ ] 已解釋特定領域的術語或概念
- [ ] 已處理邊緣案例或錯誤情境

## 5. 測試指南

- [ ] 已概述必要的測試方法
- [ ] 已識別關鍵測試情境
- [ ] 已定義成功標準
- [ ] 已註明特殊測試考量（若適用）

## 驗證結果

| 類別 | 狀態 | 問題 |
| ------------------------------------ | ----------------- | ------ |
| 1. 目標與情境清晰度 | 通過/失敗/部分通過 | |
| 2. 技術實作指南 | 通過/失敗/部分通過 | |
| 3. 參考有效性 | 通過/失敗/部分通過 | |
| 4. 自我包含評估 | 通過/失敗/部分通過 | |
| 5. 測試指南 | 通過/失敗/部分通過 | |

**最終評估：**

- 準備就緒：story 提供足夠的實作情境
- 需要修訂：story 需要更新（請參閱問題）
- 受阻：需要外部資訊（請指明所需資訊）

==================== END: story-draft-checklist ====================