# PM 任務

## 任務 1：專案啟動與需求收集
### 步驟 1：專案簡報產生
#### 動作：
與使用者互動以收集專案簡報的資訊。使用 `project-brief-tmpl` 作為指南。
#### 產出物：
已完成的專案簡報文件 (例如：`project-brief.md`)。

### 步驟 2：PRD 產生
#### 動作：
根據專案簡報，與使用者合作產生產品需求文件 (PRD)。使用 `prd-tmpl` 作為指南。
#### 產出物：
已完成的 PRD 文件 (例如：`prd.md`)。

## 任務 2：Epic 與 Story 細化
### 步驟 1：Epic 定義
#### 動作：
根據 PRD，與使用者合作定義高階 Epic。
#### 產出物：
PRD 中已定義的 Epic 清單。

### 步驟 2：Story 分解
#### 動作：
將每個 Epic 分解為可管理的 user stories，包含驗收標準。
#### 產出物：
PRD 中每個 Epic 的詳細 user stories。

# Architect 任務

## 任務 1：架構設計
### 步驟 1：技術堆疊選擇
#### 動作：
根據 PRD 中的技術假設和非功能需求，最終確定技術堆疊。
#### 產出物：
架構文件中已定義的技術堆疊。

### 步驟 2：系統架構定義
#### 動作：
設計高階系統架構，包括元件、它們的互動以及資料模型。使用 `architecture-tmpl`。
#### 產出物：
已完成的架構文件 (例如：`architecture.md`)。

### 步驟 3：前端架構定義 (若適用)
#### 動作：
若專案包含 UI，則定義前端架構。使用 `front-end-architecture-tmpl`。
#### 產出物：
已完成的前端架構文件 (例如：`front-end-architecture.md`)。

# Developer 任務 (針對每個 Story)

## 任務 1：Story 實作
### 步驟 1：程式碼實作
#### 動作：
根據 Story 規格和架構文件撰寫程式碼。
#### 產出物：
實作 Story 功能的程式碼。

### 步驟 2：單元測試
#### 動作：
為實作的程式碼撰寫單元測試。
#### 產出物：
通過的單元測試。

## 任務 2：整合與測試
### 步驟 1：整合測試 (若適用)
#### 動作：
執行整合測試以確保 Story 與系統其他部分正確互動。
#### 產出物：
通過的整合測試。

### 步驟 2：端對端測試 (若適用)
#### 動作：
執行端對端測試以驗證整個使用者流程。
#### 產出物：
通過的端對端測試。

# Librarian 任務

## 任務 1：文件分片
### 步驟 1：準備分片計畫
#### 動作：
檢閱 `doc-sharding-tmpl` 並根據專案文件進行調整。
#### 產出物：
最終確定的文件分片計畫。

### 步驟 2：執行分片
#### 動作：
根據分片計畫將大型文件 (PRD、架構文件) 分割為較小的、集中的文件。
#### 產出物：
一組分片後的文件 (例如：`docs/epic-1.md`, `docs/api-reference.md`)。

### 步驟 3：更新索引
#### 動作：
更新 `docs/index.md` 以包含所有新建立或修改過的文件連結。
#### 產出物：
更新後的 `docs/index.md` 檔案。
