==================== START: checklist-mappings ====================
architect-checklist:
  checklist_file: docs/checklists/architect-checklist.txt
  required_docs:
    - architecture.md
  default_locations:
    - docs/architecture.md

frontend-architecture-checklist:
  checklist_file: docs/checklists/frontend-architecture-checklist.txt
  required_docs:
    - frontend-architecture.md
  default_locations:
    - docs/frontend-architecture.md
    - docs/fe-architecture.md

pm-checklist:
  checklist_file: docs/checklists/pm-checklist.txt
  required_docs:
    - prd.md
  default_locations:
    - docs/prd.md

po-master-checklist:
  checklist_file: docs/checklists/po-master-checklist.txt
  required_docs:
    - prd.md
    - architecture.md
  optional_docs:
    - frontend-architecture.md
  default_locations:
    - docs/prd.md
    - docs/frontend-architecture.md
    - docs/architecture.md

story-draft-checklist:
  checklist_file: docs/checklists/story-draft-checklist.txt
  required_docs:
    - story.md
  default_locations:
    - docs/stories/*.md

story-dod-checklist:
  checklist_file: docs/checklists/story-dod-checklist.txt
  required_docs:
    - story.md
  default_locations:
    - docs/stories/*.md

==================== END: checklist-mappings ====================


==================== START: checklist-run-task ====================
# Checklist 驗證任務

此任務提供根據 checklist 驗證文件的說明。代理程式應遵循這些說明，以確保對文件進行徹底且系統性的驗證。

## 情境

BMAD 方法使用各種 checklist 來確保不同產出物的品質與完整性。checklist 與其所需文件之間的對應關係定義在 `checklist-mappings` 中。這使得新增 checklist 變得容易，而無需修改此任務。

## 指令

1. **初步評估**

   - 檢查 `checklist-mappings` 以了解可用的 checklist
   - 如果使用者提供 checklist 名稱：
     - 在 checklist-mappings.yml 中尋找完全相符的項目
     - 如果沒有完全相符的項目，嘗試模糊比對（例如 "architecture checklist" -> "architect-checklist"）
     - 如果找到多個相符項目，請使用者釐清
     - 一旦比對成功，使用對應關係中的 checklist_file 路徑
   - 如果未指定 checklist：
     - 詢問使用者想使用哪個 checklist
     - 從 checklist-mappings.yml 中呈現可用選項
   - 確認他們是否想逐項完成 checklist：
     - 逐節進行（互動模式）
     - 一次完成（YOLO 模式）

2. **文件位置**

   - 在 `checklist-mappings` 中查詢所需文件和預設位置
   - 對於每個所需文件：
     - 檢查對應關係中指定的所有預設位置
     - 如果找不到，詢問使用者文件位置
   - 驗證所有所需文件皆可存取

3. **Checklist 處理**

   如果在互動模式下：

   - 一次處理 checklist 的一個章節
   - 對於每個章節：
     - 檢閱該章節中的所有項目
     - 根據相關文件檢查每個項目
     -呈現該章節的結果
     - 在進入下一章節前取得使用者確認

   如果在 YOLO 模式下：

   - 一次處理所有章節
   - 建立一份包含所有結果的綜合報告
   - 向使用者呈現完整的分析結果

4. **驗證方法**

   對於每個 checklist 項目：

   - 閱讀並理解需求
   - 在文件中尋找滿足需求的證據
   - 考量明確提及和隱含涵蓋的內容
   - 將項目標記為：
     - ✅ PASS：需求明確滿足
     - ❌ FAIL：需求未滿足或涵蓋不足
     - ⚠️ PARTIAL：部分符合但需改進
     - N/A：不適用於此情況

5. **章節分析**

   對於每個章節：

   - 計算通過率
   - 找出未通過項目的共通主題
   - 提供具體的改進建議
   - 在互動模式下，與使用者討論結果
   -記錄任何使用者決定或解釋

6. **最終報告**

   準備一份摘要，包含：

   - 整體 checklist 完成狀態
   - 各章節通過率
   - 未通過項目清單及其情境
   - 具體的改進建議
   - 任何標記為 N/A 的章節或項目及其理由

## 特殊考量

1. **Architecture Checklist**

   - 著重於技術完整性與清晰度
   - 驗證所有系統元件皆已處理
   - 檢查安全與可擴展性考量
   - 確保涵蓋部署與營運方面

2. **Frontend Architecture Checklist**

   - 驗證 UI/UX 規格
   - 檢查元件結構與組織
   - 驗證狀態管理方法
   - 確保響應式設計考量

3. **PM Checklist**

   - 著重於產品需求清晰度
   - 驗證 user stories 與 acceptance criteria
   - 檢查市場與使用者研究涵蓋範圍
   - 確保已處理技術可行性

4. **Story Checklists**
   - 驗證清晰的 acceptance criteria
   - 檢查技術情境與相依性
   - 確保已處理可測試性
   - 驗證使用者價值已清楚陳述

## 成功標準

Checklist 驗證完成的條件：

1. 所有適用項目皆已評估
2. 每個項目皆有明確的通過/未通過狀態
3. 為未通過項目提供具體建議
4. 使用者已檢閱並確認結果
5. 最終報告記錄所有決定與理由

## 互動範例

代理程式：「讓我檢查一下可用的 checklist... 根據 checklist-mappings.yml，我們有幾個選項。您想使用哪一個？」

使用者：「architect checklist」

代理程式：「您想要逐節進行（互動式）還是一次取得完整的分析（YOLO 模式）？」

使用者：「請用互動式」

代理程式：「根據對應關係，我需要檢查 architecture.md。預設位置是 docs/architecture.md。我應該查看那裡嗎？」

[根據使用者回應繼續互動...]

==================== END: checklist-run-task ====================


==================== START: correct-course ====================
# 修正航向任務

## 目的

- 使用 `change-checklist` 引導對變更觸發事件的結構化回應。
- 根據 checklist 的結構，分析變更對 epics、專案產出物和 MVP 的影響。
- 按照 checklist 的提示，探索潛在的解決方案（例如，調整範疇、回復元素、重新界定功能範疇）。
- 根據分析結果，草擬對任何受影響專案產出物（例如，epics、user stories、PRD 章節、架構文件章節）的具體、可執行的建議更新。
- 產生一份合併的「Sprint 變更提案」文件，其中包含影響分析和清楚草擬的建議編輯，供使用者檢閱和核准。
- 如果變更的性質需要其他核心代理程式（如 PM 或 Architect）進行根本性的重新規劃，確保有明確的交接路徑。

## 指令

### 1. 初始設定與模式選擇

- **確認任務與輸入：**
  - 向使用者確認正在啟動「修正航向任務」（變更導航與整合）。
  - 驗證變更觸發事件，並確保您已取得使用者對問題及其感知影響的初步解釋。
  - 確認可存取所有相關專案產出物（例如，PRD、Epics/Stories、架構文件、UI/UX 規格）以及至關重要的 `change-checklist`（例如，`change-checklist`）。
- **建立互動模式：**
  - 詢問使用者他們偏好此任務的互動模式：
    - **「漸進式（預設且建議）：** 我們是否要逐節檢視 `change-checklist`，討論結果並在進入下一部分之前共同草擬每個相關部分的建議變更？這有助於進行詳細、逐步的完善。」
    - **「YOLO 模式（批次處理）：** 或者，您是否偏好我根據 checklist 進行更批次的分析，然後呈現一份合併的結果和建議變更，以供更廣泛的檢閱？這對於初步評估可能更快，但可能需要對合併的提案進行更廣泛的檢閱。」
  - 請使用者選擇他們偏好的模式。
  - 使用者選擇後，確認所選模式（例如，「好的，我們將以漸進模式進行。」）。此所選模式將決定此任務後續步驟的執行方式。
- **解釋流程：** 簡要告知使用者：「我們現在將使用 `change-checklist` 來分析變更並草擬建議的更新。我將根據我們選擇的互動模式引導您完成 checklist 項目。」
  <rule>當一次提出多個問題或呈現多個要點供使用者輸入時，請清楚編號（例如，1.、2a.、2b.），以便使用者更容易提供具體的回應。</rule>

### 2. 執行 Checklist 分析（根據互動模式，漸進式或批次式）

- 系統性地完成 `change-checklist` 的第 1-4 節（通常涵蓋變更情境、Epic/Story 影響分析、產出物衝突解決以及路徑評估/建議）。
- 對於每個 checklist 項目或邏輯項目群組（取決於互動模式）：
  - 向使用者呈現 checklist 中的相關提示或考量。
  - 要求必要的資訊，並積極分析相關的專案產出物（PRD、epics、架構文件、story 歷史等）以評估影響。
  - 與使用者討論每個項目的結果。
  - 記錄每個 checklist 項目的狀態（例如，`[x] 已處理`、`[N/A]`、`[!] 需要進一步行動`）以及任何相關的筆記或決定。
  - 按照 checklist 第 4 節的提示，共同商定「建議的前進路徑」。

### 3. 草擬建議變更（漸進式或批次式）

- 根據已完成的 checklist 分析（第 1-4 節）和商定的「建議的前進路徑」（不包括需要立即交接給 PM/Architect 進行根本性重新規劃的情境）：
  - 找出需要更新的具體專案產出物（例如，特定的 epics、user stories、PRD 章節、架構文件元件、圖表）。
  - **直接且明確地為每個找出的產出物草擬建議的變更。** 範例包括：
    - 修訂 user story 文字、acceptance criteria 或優先順序。
    - 在 epics 中新增、移除、重新排序或拆分 user stories。
    - 建議修改後的架構圖片段（例如，提供更新的 Mermaid 圖表區塊或對現有圖表的清晰文字描述）。
    - 更新 PRD 或架構文件中的技術清單、組態詳細資料或特定章節。
    - 如有必要，草擬新的小型輔助產出物（例如，針對特定決策的簡短附錄）。
  - 如果處於「漸進模式」，則在草擬每個產出物或相關產出物的小群組時，與使用者討論並完善這些建議的編輯。
  - 如果處於「YOLO 模式」，則編譯所有草擬的編輯，以便在下一步驟中呈現。

### 4. 產生包含編輯的「Sprint 變更提案」

- 將完整的 `change-checklist` 分析（涵蓋第 1-4 節的結果）和所有商定的建議編輯（來自指令 3）綜合到一份名為「Sprint 變更提案」的文件中。此提案應符合 `change-checklist` 第 5 節（提案元件）建議的結構。
- 提案必須清楚呈現：
  - **分析摘要：** 簡要概述原始問題、其分析影響（對 epics、產出物、MVP 範疇的影響）以及所選前進路徑的理由。
  - **具體建議編輯：** 對於每個受影響的產出物，清楚顯示或描述確切的變更（例如，「將 Story X.Y 從：[舊文字] 變更為：[新文字]」、「將新的 Acceptance Criterion 新增至 Story A.B：[新 AC]」、「如下更新架構文件第 3.2 節：[新的/修改後的文字或圖表描述]」）。
- 向使用者呈現「Sprint 變更提案」的完整草稿，以供最終檢閱和回饋。納入使用者要求的任何最終調整。

### 5. 定案並決定後續步驟

- 取得使用者對「Sprint 變更提案」的明確核准，包括其中記錄的所有具體編輯。
- 向使用者提供定案的「Sprint 變更提案」文件。
- **根據核准變更的性質：**
  - **如果核准的編輯足以解決變更，並且可以直接實施或由 PO/SM 組織：** 陳述「修正航向任務」在分析和變更提案方面已完成，使用者現在可以繼續實施或記錄這些變更（例如，更新實際的專案文件、backlog 項目）。如果適用，建議交接給 PO/SM 代理程式進行 backlog 組織。
  - **如果分析和建議的路徑（根據 checklist 第 4 節和可能的第 6 節）指出變更需要更根本性的重新規劃（例如，重大的範疇變更、主要的架構重做）：** 清楚陳述此結論。建議使用者下一步驟是讓主要的 PM 或 Architect 代理程式參與，使用「Sprint 變更提案」作為該更深入重新規劃工作的關鍵輸入和情境。

## 產出交付項目

- **主要：** 一份「Sprint 變更提案」文件（markdown 格式）。此文件將包含：
  - `change-checklist` 分析摘要（問題、影響、所選路徑的理由）。
  - 所有受影響專案產出物的具體、清楚草擬的建議編輯。
- **隱含：** 一份註解的 `change-checklist`（或其完成記錄），反映流程中進行的討論、結果和決定。

==================== END: correct-course ====================


==================== START: create-ai-frontend-prompt ====================
# 建立 AI 前端提示任務

## 目的

產生一個精湛、全面且最佳化的提示，可用於 AI 驅動的前端開發工具（例如 Lovable、Vercel v0 或類似工具），以搭建鷹架或產生前端應用程式的重要部分。

## 輸入

- 已完成的 UI/UX 規格 (`front-end-spec-tmpl`)
- 已完成的前端架構文件 (`front-end-architecture`)
- 主要系統架構文件 (`architecture` - 用於 API 合約和技術堆疊)
- 主要設計檔案 (Figma、Sketch 等 - 如果工具可以接受或需要描述，則用於視覺情境)

## 主要活動與指令

1.  **確認目標 AI 產生平台：**

    - 要求使用者指定他們打算使用的 AI 前端產生工具/平台（例如，「Lovable.ai」、「Vercel v0」、「帶有直接程式碼產生指令的 GPT-4」等）。
    - 解釋提示最佳化可能會因平台的功能和偏好的輸入格式而略有不同。

2.  **將輸入綜合為結構化提示：**

    - **整體專案情境：**
      - 簡要說明專案目的（來自簡報/PRD）。
      - 指定所選的前端框架、核心函式庫和 UI 元件庫（來自 `front-end-architecture` 和主要 `architecture`）。
      -提及樣式設定方法（例如 Tailwind CSS、CSS Modules）。
    - **設計系統與視覺效果：**
      - 參考主要設計檔案（例如 Figma 連結）。
      - 如果工具不直接擷取設計檔案，請描述整體視覺風格、調色盤、排版和關鍵品牌元素（來自 `front-end-spec-tmpl`）。
      - 列出任何應定義或遵守的全域 UI 元件或設計 token。
    - **應用程式結構與路由：**
      - 描述主要頁面/檢視及其路由（來自 `front-end-architecture` - 路由策略）。
      -概述導覽結構（來自 `front-end-spec-tmpl`）。
    - **關鍵使用者流程與頁面層級互動：**
      - 對於一些關鍵的使用者流程（來自 `front-end-spec-tmpl`）：
        - 描述使用者動作的順序以及每個相關頁面上預期的 UI 變更。
        - 指定要進行的 API 呼叫（參考主要 `architecture` 中的 API 端點）以及應如何顯示或使用資料。
    - **元件產生指令（迭代或關鍵元件）：**
      - 根據所選 AI 工具的功能，決定策略：
        - **選項 1 (搭建鷹架)：** 提示產生主要頁面結構、版面配置和元件的預留位置。
        - **選項 2 (關鍵元件產生)：** 從 `front-end-architecture` (元件分解) 中選取一些關鍵或複雜的元件，並為其提供詳細規格 (props、state、基本行為、關鍵 UI 元素)。
        - **選項 3 (整體性，如果工具支援)：** 嘗試更廣泛地描述整個應用程式結構和關鍵元件。
      - <important_note>建議使用者，一次完美產生整個複雜應用程式的情況很少見。迭代提示或專注於區段/關鍵元件通常更有效。</important_note>
    - **狀態管理 (高階指標)：**
      - 提及所選的狀態管理解決方案（例如，「使用 Redux Toolkit」）。
      - 對於關鍵資料片段，指出是否應在全域狀態中管理。
    - **API 整合點：**
      - 對於擷取或提交資料的頁面/元件，清楚說明相關的 API 端點 (來自 `architecture`) 和預期的資料形狀 (可以參考 `data-models` 中的 schema 或架構文件的 `api-reference` 章節)。
    - **關鍵「禁止事項」或限制：**
      - 例如，「不要使用已棄用的函式庫。」「確保所有表單都具有基本的用戶端驗證。」
    - **平台特定最佳化：**
      - 如果所選的 AI 工具有已知的提示最佳實務（例如，特定的關鍵字、結構、詳細程度），請將其納入。(這可能需要代理程式具備一些一般知識，或者詢問使用者是否知道其所選工具的任何此類特定提示修飾符)。

3.  **呈現並完善主要提示：**
    - 以清晰、可複製貼上的格式輸出產生的提示（例如，大型程式碼區塊）。
    - 解釋提示的結構以及為何包含某些資訊。
    - 與使用者合作，根據他們對目標 AI 工具的了解以及他們想要強調的任何特定細微差別來完善提示。
    - <important_note>提醒使用者，AI 工具產生的程式碼可能需要開發人員進行檢閱、測試和進一步完善。</important_note>

==================== END: create-ai-frontend-prompt ====================


==================== START: create-architecture ====================
# 架構建立任務

## 目的

- 根據專案需求（PRD、epics、簡報）、研究結果和使用者輸入，設計一個完整、穩健且文件齊全的技術架構。
- 做出明確的技術選擇並闡明其理由，利用架構範本作為結構指南。
- 產生所有必要的技術產出物，確保架構經過最佳化以實現高效實施，特別是由 AI 開發者代理程式實施，並根據 `architect-checklist` 進行驗證。

## 指令

1.  **輸入分析與對話建立：**

    - 確保您擁有所有必要的輸入：PRD 文件（特別檢查「技術假設」和「初始架構師提示」章節以了解已決定的儲存庫和服務架構）、專案簡報、任何深度研究報告，以及可選的 `technical-preferences.md`。要求任何遺失的關鍵文件。
    - 徹底檢閱所有輸入。
    - 總結從輸入中衍生的關鍵技術需求、限制、NFR（非功能性需求）以及已決定的儲存庫/服務架構。向使用者呈現此摘要以供確認並確保相互理解。
    - 分享基於輸入的初步架構觀察、潛在挑戰或需要釐清的領域。
      **建立架構建立的互動模式：**
      - 詢問使用者：「您希望如何進行此專案的架構建立？我們可以：
        A. **漸進式（預設且建議）：** 我們將逐步完成每個架構決策、文件章節或設計要點。我將呈現草稿，並在進入下一部分之前尋求您的回饋和確認。這最適合複雜的決策和詳細的完善。
        B. **「YOLO」模式：** 我可以為您產生更全面的架構初始草稿（或重要部分），供您先進行更廣泛的檢閱。然後我們可以根據您的回饋迭代特定章節。這對於產生初始想法可能更快，但如果偏好在每個步驟進行詳細協作，則通常不建議這樣做。」
      - 請使用者選擇他們偏好的模式（例如，「請告訴我您偏好 A 或 B。」）。
      - 使用者選擇後，確認所選模式（例如，「好的，我們將以漸進模式進行。」）。此所選模式將決定此任務後續步驟的執行方式。

2.  **解決模糊不清之處並收集遺失資訊：**

    - 如果在初步檢閱後仍遺失關鍵資訊或需求不清楚，請提出具體、有針對性的問題。
    - **外部 API 詳細資料：** 如果專案涉及與外部 API 整合，特別是那些較不常見或您對其特定請求/回應 schema 缺乏高度信心的 API，並且如果未對這些 API 進行「深度研究」階段：
      - 主動要求使用者提供精確的詳細資料。這包括：
        - 官方 API 文件連結。
        - 請求結構範例（例如，cURL 指令、JSON 酬載）。
        - 回應結構範例（例如，典型情境的 JSON 回應，包括錯誤回應）。
      - 解釋此資訊對於在架構中準確定義 API 互動合約、建立穩健的 facade/adapter 以及實現準確的技術規劃（例如，技術 story 或 epic 完善）至關重要。
    - 向使用者提出問題（如果有多個問題，則進行邏輯分批）並等待其輸入。
    - 在繼續之前記錄所有決定和釐清。

3.  **迭代技術選擇與設計（互動式，如果非 YOLO 模式）：**

    - 對於每個主要架構元件或決策點（例如，前端框架、後端語言/框架、資料庫系統、雲端供應商、關鍵服務、通訊模式）：
      - 如果根據需求或研究存在多個可行選項，請呈現 2-3 個選擇，簡要概述其優缺點以及與專案的相關性。在制定這些選項和您的建議時，請考量 `technical-preferences.md` 中陳述的任何偏好。
      - 陳述您的建議選擇，並根據需求、研究結果、使用者偏好（如果已知）和最佳實務（例如，可擴展性、成本、團隊熟悉度、生態系統）提供明確的理由。
      - 在最終確定決策之前，徵求使用者回饋、解決疑慮並尋求明確核准。
      - 在架構文件中記錄已確認的選擇及其理由。
    - **入門範本：** 如果適用且有要求，研究並建議合適的入門範本或評估現有的程式碼庫。解釋與專案目標的一致性並尋求使用者確認。

4.  **建立技術產出物（漸進式，除非是 YOLO 模式，並以 `architecture-tmpl` 為指南）：**

    - 對於主要架構文件的每個產出物或章節：

      - **解釋目的：** 簡要描述產出物/章節的重要性及其涵蓋內容。
      - **逐節草擬：** 一次呈現一個邏輯章節的草稿。
        - 確保「高階概觀」和「元件檢視」章節準確反映並詳細說明 PRD 中決定的儲存庫/服務架構。
        - 確保文件化的編碼標準（作為專用章節或參考）和「測試策略」章節清楚定義：
          - 單元測試檔案位置的慣例（例如，與原始檔位於相同位置，或位於單獨的資料夾中，如 `tests/` 或 `__tests__/`）。
          - 單元測試檔案的命名慣例（例如，`*.test.js`、`*.spec.ts`、`test_*.py`）。
        - 討論編碼標準時，告知使用者這些將作為 AI 開發者代理程式的嚴格規則。強調這些標準應保持在最低必要程度，以防止代理程式產生不良或混亂的程式碼。引導使用者了解應避免過於規範或顯而易見的標準（例如，「使用 SOLID 原則」，訓練有素的 LLM 應該已經知道），因為使用者了解他們將採用的特定代理程式和工具，可以最好地判斷適當的詳細程度。
      - **納入回饋：** 與使用者討論草稿，納入其回饋，並視需要進行迭代。
      - 提供進階反思與引導選項：
        <critical_rule>一旦重要架構文件章節（例如，「元件檢視」、「資料管理策略」、「安全性架構」）的草稿已建立，且您（執行此任務的 AI 代理程式）已納入使用者對該特定草稿的初步回饋和修訂，您接著將向使用者呈現以下「進階反思、引導與腦力激盪行動」清單。解釋這些是可選步驟，有助於在繼續之前確保品質、探索替代方案並加深對目前草稿的理解。使用者可以透過數字選擇一個行動，或選擇跳過此步驟並繼續。</critical_rule>

        「我們已經完善了目前架構章節的草稿：[特定架構章節/元件]。為確保其穩健性、探索替代方案並考量所有角度，我可以執行以下其中一項行動。請選擇一個數字，或者如果您準備好繼續，請告訴我：

        **我可以採取的進階反思、引導與腦力激盪行動：**

        {AI 代理程式指令：僅顯示以下每個編號項目的標題。如果使用者詢問特定選項的含義，請根據為架構師情境概述的詳細描述，簡要解釋您將採取的行動。}

        1.  **嚴格自我檢閱與需求一致性**
        2.  **產生並評估替代架構方法**
        3.  **韌性、可擴展性與效能壓力測試（概念性）**
        4.  **深入探討技術假設、限制與相依性**
        5.  **安全性與風險評估檢閱與探究性問題**
        6.  **協作設計腦力激盪與模式探索**
        7.  **引導「未預見的影響」與未來驗證問題**
        8.  **繼續下一個 [架構章節/任務]。**

        在我執行所選行動後，我們可以討論結果並決定任何進一步的修訂。
        當您對此章節的目前草稿感到滿意時，我們可以接著進行 [下一個邏輯步驟，例如，「下一個架構元件」，或者如果所有章節都已草擬完成，則為「步驟 5：找出遺失的技術 Story / 完善 Epics」或「步驟 6：根據 Checklist 驗證架構並定案輸出」]。」

      - **尋求核准：** 在進入下一節之前取得使用者對該節的明確核准，或者如果是在 YOLO 模式下整體草擬，則取得對整個產出物的核准。

5.  **找出遺失的技術 Story / 完善 Epics (互動式)：**

    - 根據設計的架構，找出任何尚未在 PRD 或 epics 中擷取的必要技術 story/任務（例如，「為前端部署設定 CI/CD pipeline」、「使用 JWT 實作驗證模組」、「為後端服務建立基礎 Docker 映像檔」、「根據資料模型設定初始資料庫 schema」）。
    - 解釋這些技術 story 對於實現功能需求和成功執行專案的重要性。
    - 與使用者協作以完善這些 story（清晰的描述、acceptance criteria），並建議將其新增至專案 backlog 或相關 epics。
    - 檢閱 PRD 中的現有 epics/stories，並建議技術考量或 acceptance criteria 的完善，以確保它們可以根據所選架構實作。例如，指定要呼叫的 API 端點、資料格式或關鍵函式庫版本。
    - 協作後，準備一份簡明摘要，詳細說明對 epics 和 user stories 的所有建議新增、更新或修改。如果未找出任何變更，則明確說明。

6.  **根據 Checklist 驗證架構並定案輸出：**
    - 主要架構文件元件草擬完成並與使用者檢閱後，使用 `architect-checklist` 進行全面檢閱。
    - 逐項檢查 checklist 中的項目，以確保架構文件全面，處理所有關鍵架構問題（例如，安全性、可擴展性、可維護性、可測試性（包括確認編碼標準和測試策略清楚定義單元測試位置和命名慣例）、開發者體驗），並且建議的解決方案穩健。
    - 對於每個 checklist 項目，確認其狀態（例如，\[x] 已完成、\[ ] N/A、\[!] 需要注意）。
    - 如果根據 checklist 找出缺陷、差距或需要更詳細說明或釐清的領域：
      - 與使用者討論這些結果。
      - 共同對架構文件進行必要的更新、新增或完善，以解決這些問題。
    - 處理完所有 checklist 要點並確保架構文件穩健且完整後，向使用者呈現 checklist 檢閱摘要。此摘要應強調：
      - 確認架構已滿足 checklist 的所有相關章節/項目。
      - 任何標記為 N/A 的項目，並附上簡要理由。
      - 簡要說明因 checklist 檢閱而對架構文件進行的任何重大討論、決定或變更。
    - **提供設計架構師提示 (如果適用)：**
      - 如果架構包含 UI 元件，詢問使用者是否希望在主要架構文件末尾包含一個專門給「設計架構師」的提示。
      - 解釋此提示可以擷取特定的 UI 考量、討論筆記或不適合放在核心技術架構文件中但對設計架構師至關重要的決定。
      - 提示還應說明設計架構師後續將在其專門模式下運作，以定義詳細的前端架構。
      - 如果使用者同意，共同草擬此提示並將其附加到架構文件中。
    - 取得使用者對完整架構文件產生的最終核准。
    - **建議 UI 的後續步驟 (如果適用)：**
      - 主要架構文件定案並核准後：
      - 如果專案涉及使用者介面 (從輸入的 PRD 以及可能提及 UI 元件或參考設計架構師 UI/UX 規格階段輸出的架構文件本身應可看出)：
        - 強烈建議使用者 UI 的下一個關鍵步驟是讓 **設計架構師** 代理程式參與。
        - 具體而言，建議他們使用設計架構師的 **「前端架構模式」**。
        - 解釋設計架構師將使用現已完成的主要架構文件和詳細的 UI/UX 規格 (例如 `front-end-spec-tmpl.txt` 或充實的 PRD) 作為主要輸入，以定義特定的前端架構、選擇前端函式庫/框架 (如果尚未決定)、建構前端元件並詳細說明互動模式。

### 架構建立階段的產出交付項目

- 一份全面的架構文件，根據 `architecture-tmpl` (全為 markdown) 或商定的格式建構，包含上述所有章節。
- 清晰的 Mermaid 圖表，用於架構概觀、資料模型等。
- 一份新的或完善的技術 user stories/任務清單，可供 backlog 整合。
- 一份摘要，說明對現有 epics 或 user stories 所需的任何已找出變更 (新增、更新、修改)，或者如果不需要此類變更，則明確確認。
- 一份已完成的 `architect-checklist` (或其驗證摘要)。
- 可選地，如果涉及 UI 元件且使用者同意：附加到主要架構文件的一個給「設計架構師」的提示，總結相關的 UI 考量並概述設計架構師的後續步驟。

==================== END: create-architecture ====================


==================== START: create-deep-research-prompt ====================
## 深度研究階段

憑藉先進的分析能力，PM 的深度研究階段旨在提供對產品定義至關重要的針對性策略洞察。與分析師可能進行的更廣泛探索性研究不同，PM 利用深度研究來：

- **驗證產品假設：** 嚴格測試關於市場需求、使用者問題以及特定產品概念可行性的假設。
- **完善目標受眾與價值主張：** 對特定使用者區隔、其確切痛點以及建議產品如何為其提供獨特價值獲得細緻的理解。
- **聚焦的競爭分析：** 從特定產品概念的角度分析競爭對手，以找出差異化機會、可利用的功能差距以及潛在的市場定位挑戰。
- **降低 PRD 承諾的風險：** 確保在 PRD 產生模式中進行詳細規劃和資源分配*之前*，問題、建議的解決方案和核心功能都已得到充分理解和驗證。

當您需要策略性地驗證產品方向、填補對定義*要打造什麼*至關重要的特定知識差距，或確保您的 PRD 擁有堅實、有證據支持的基礎時，請與 PM 一起選擇此階段，特別是如果未執行初步的分析師研究或需要更深入、以產品為重點的調查。

### 目的

- 當分析師提供的全面專案簡報不可用或不足時，收集基礎資訊、驗證概念、了解市場需求或分析競爭對手。
- 確保 PM 在承諾 PRD 細節之前，擁有堅實、以數據為基礎的依據來定義有價值且可行的產品。
- 透過以針對性研究為基礎來降低產品決策的風險，特別是如果使用者直接與 PM 互動而沒有先前的分析師工作，或者如果初始簡報缺乏必要的深度。

### 指令

<critical_rule>關於深度研究執行的注意事項：</critical_rule>
為了有效地執行深度研究，請注意：

- 您可能需要使用目前的對話代理程式來協助您制定全面的研究提示，然後可以由專用的深度研究模型或功能執行。
- 或者，確保您已啟動或切換到具有整合深度研究功能的模型/環境。
  此代理程式可以引導您準備深度研究，但執行可能需要這些步驟之一。

1.  **評估輸入並找出差距：**
    - 檢閱任何現有輸入（使用者的初始想法、高階需求、分析師的部分簡報等）。
    - 清楚找出關於以下方面的關鍵知識差距：
      - 目標受眾（需求、痛點、行為、關鍵區隔）。
      - 市場格局（規模、趨勢、機會、潛在飽和度）。
      - 競爭分析（主要的直接/間接競爭對手、其產品、優勢、劣勢、市場定位、此產品的潛在差異化因素）。
      - 問題/解決方案驗證（支持建議解決方案的價值及其與已找出問題的契合度的證據）。
      - 高階技術或資源考量（潛在的主要障礙或相依性）。
2.  **制定研究計畫：**
    - 定義具體、可行的研究問題以解決已找出的差距。
    - 建議針對性的研究活動（例如，針對市場報告、競爭對手網站、產業分析、類似產品的使用者評論、技術趨勢進行重點網路搜尋）。
    - <important_note>在繼續執行研究之前，與使用者確認此研究計畫、範疇和關鍵問題。</important_note>
3.  **執行研究：**
    - 系統性地執行計畫的研究活動。
    - 優先收集直接為產品定義和策略提供資訊的可靠、相關且可行的見解。
4.  **綜合與呈現結果：**
    - 以清晰、簡潔且易於理解的方式組織和總結關鍵研究結果（例如，項目符號、每個研究問題的簡要摘要）。
    - 強調對產品願景、策略、目標受眾、核心功能和潛在風險的最關鍵影響。
    - 向使用者呈現這些綜合結果及其影響。
5.  **討論與運用研究產出：**
    - 此深度研究階段的全面結果/報告可能相當可觀。我可以與您討論這些內容，詳細解釋任何部分，並協助您了解其影響。
    - **運用這些結果產生 PRD 的選項：**
      1.  **完整交接給新的 PM 會談：** 如果您與產品經理 (PM) 代理程式啟動一個*新的*會談，完整的研​​究產出可以作為基礎文件，然後該代理程式將執行「PRD 產生任務」。
      2.  **此會談的關鍵洞察摘要：** 我可以準備一份最關鍵結果的簡明摘要，以便在我們（在目前會談中）轉換為可能調用「PRD 產生任務」時直接採取行動。
    - <critical_rule>無論您如何進行，強烈建議在調用「PRD 產生任務」時，將這些研究結果（完整產出或關鍵洞察摘要）作為直接輸入。這可確保 PRD 建立在堅實、有證據支持的基礎之上。</critical_rule>
6.  **確認 PRD 產生準備就緒：**
    - 與使用者討論收集到的資訊是否為繼續進行「PRD 產生任務」提供了充分且可靠的基礎。
    - 如果仍存在重大差距或不確定性，請與使用者討論並決定進一步的針對性研究，或者是否需要記錄並推進假設。
    - 一旦確認，清楚說明下一步驟可以是調用「PRD 產生任務」，或者如果適用，重新審視其他階段選項。

==================== END: create-deep-research-prompt ====================


==================== START: create-frontend-architecture ====================
# 建立前端架構任務

## 目的

定義前端應用程式的技術架構。這包括選擇適當的模式、建構程式碼庫、定義元件策略、規劃狀態管理、概述 API 互動，以及設定測試和部署方法，同時遵守 `front-end-architecture-tmpl` 範本中的指南。

## 輸入

- 產品需求文件 (PRD) (`prd-tmpl` 或同等文件)
- 已完成的 UI/UX 規格 (`front-end-spec-tmpl` 或同等文件)
- 主要系統架構文件 (`architecture` 或同等文件) - 執行此任務的代理程式應特別注意此處詳述的整體系統結構 (Monorepo/Polyrepo、後端服務架構)，因為它會影響前端模式。
- 主要設計檔案 (Figma、Sketch 等，從 UI/UX 規格連結)

## 主要活動與指令

### 1. 確認互動模式

- 詢問使用者：「您希望如何進行前端架構的建立？我們可以：
  A. **漸進式（預設且建議）：** 我們將逐步完成每個架構決策和文件章節。我將呈現草稿，並在進入下一部分之前尋求您的回饋和確認。這最適合複雜的決策和詳細的完善。
  B. **「YOLO」模式：** 我可以為您產生更全面的前端架構初始草稿，供您先進行更廣泛的檢閱。然後我們可以根據您的回饋迭代特定章節。這對於產生初始想法可能更快，但如果偏好在每個步驟進行詳細協作，則通常不建議這樣做。」
- 請使用者選擇他們偏好的模式（例如，「請告訴我您偏好 A 或 B。」）。
- 使用者選擇後，確認所選模式（例如，「好的，我們將以漸進模式進行。」）。此所選模式將決定後續步驟的執行方式。

### 2. 檢閱輸入並建立情境

- 徹底檢閱輸入，包括 UI/UX 規格和主要架構文件（特別是「明確的技術堆疊選擇」、API 合約以及文件化的整體系統結構，如 monorepo/polyrepo 選擇）。
- 提出釐清問題，以彌補 UI/UX 願景與整體系統架構之間的任何差距。

### 3. 定義整體前端理念與模式 (用於 `front-end-architecture`)

- 根據主要架構的技術堆疊和整體系統結構 (monorepo/polyrepo、後端服務詳細資料)，確認並詳細說明：
  - 框架與核心函式庫選擇。
  - 高階元件架構策略。
  - 高階狀態管理策略。
  - 資料流原則。
  - 樣式設定方法。
  - 將採用的關鍵設計模式。

### 4. 指定詳細的前端目錄結構 (用於 `front-end-architecture`)

- 共同定義或完善前端特定的目錄結構，確保其與所選框架一致並促進模組化和可擴展性。

### 5. 概述元件策略與慣例 (用於 `front-end-architecture`)

- 定義元件命名與組織慣例。
- 建立「元件規格範本」(依照 `front-end-architecture`)，強調大多數元件將會緊急詳述，但必須遵循此範本。
- 可選擇性地指定一些絕對基礎/共用的 UI 元件 (例如，如果所選的 UI 函式庫需要，或者未使用 UI 函式庫，則為通用的按鈕或模態框包裝器)。

### 6. 詳細說明狀態管理設定與慣例 (用於 `front-end-architecture`)

- 根據高階策略，詳細說明：
  - 所選解決方案與核心設定。
  - Store 結構 / Slices 的慣例 (例如，「基於功能的 slices」)。定義任何真正的全域/核心 slices (例如，session/auth)。
  - Selectors 和 Actions/Reducers/Thunks 的慣例。提供範本或範例。

### 7. 規劃 API 互動層 (用於 `front-end-architecture`)

- 定義 HTTP 用戶端設定。
- 建立服務定義模式 (API 呼叫將如何封裝)。
- 概述 API 呼叫的前端錯誤處理與重試策略。

### 8. 定義路由策略 (用於 `front-end-architecture`)

- 確認路由函式庫。
- 共同定義主要路由定義和任何路由守衛。

### 9. 指定建置、打包和部署詳細資料 (用於 `front-end-architecture`)

- 概述前端特定的建置流程與腳本。
- 討論並記錄關鍵打包最佳化。
- 確認與前端相關的 CDN/主機部署詳細資料。

### 10. 完善前端測試策略 (用於 `front-end-architecture`)

- 詳細說明主要測試策略，並針對以下方面提供具體細節：元件測試、UI 整合/流程測試以及 E2E UI 測試範疇和工具。

### 11. 概述效能考量 (用於 `front-end-architecture`)

- 列出將採用的關鍵前端特定效能策略。

### 12. 文件草擬與確認 (以 `front-end-architecture-tmpl` 為指南)

- **如果選擇了「漸進模式」：**

  - 對於 `front-end-architecture` 的每個相關章節 (如上述步驟 3-11 所述，涵蓋從整體理念到效能考量的主題)：

    - **a. 解釋目的與草擬章節：** 解釋章節的目的並呈現該章節的草稿。
    - **b. 初步討論與回饋：** 與使用者討論草稿，納入其回饋，並視需要進行初步修訂的迭代。
    - **c. 提供進階反思與引導選項：**
      <critical_rule>在納入使用者對草擬的前端架構章節的初步回饋後，您接著將向使用者呈現以下「進階反思、引導與腦力激盪行動」清單。解釋這些是可選步驟，有助於在定案並繼續之前確保品質、探索替代方案並加深對目前草稿的理解。使用者可以透過數字選擇一個行動，或選擇跳過此步驟並繼續定案該章節。</critical_rule>

      「我們已將您的初步回饋納入目前前端架構章節的草稿中：**[特定前端架構章節名稱]**。為確保其穩健性、探索替代方案並考量所有角度，我可以執行以下其中一項行動。請選擇一個數字，或者如果您準備好定案此章節，請告訴我：

      **我可以採取的進階反思、引導與腦力激盪行動：**

      {AI 代理程式指令：僅顯示以下每個編號項目的標題。如果使用者詢問特定選項的含義，請根據為前端架構情境量身打造的詳細描述，簡要解釋您將採取的行動。}

      1.  **嚴格自我檢閱與需求一致性**
      2.  **產生並評估替代架構方法**
      3.  **韌性、可擴展性與效能壓力測試（概念性）**
      4.  **深入探討技術假設、限制與相依性**
      5.  **可維護性與可測試性稽核檢閱與探究性問題**
      6.  **協作設計腦力激盪與模式/技術探索**
      7.  **引導「未預見的影響」與未來驗證問題**
      8.  **定案此章節並繼續。**

      在我執行所選行動後，我們可以討論結果並決定此章節的任何進一步修訂。」

    - **d. 最終核准與文件記錄：** 取得使用者對該章節的明確核准。確保在每個章節中正確記錄所有預留位置連結和參考。然後繼續下一章節。

  - 一旦所有章節都透過此流程個別核准，請與使用者確認整體 `front-end-architecture` 文件已填寫完成，並準備好進行步驟 13 (Epic/Story 影響) 和步驟 14 (checklist 檢閱)。

- **如果選擇了「YOLO 模式」：**
  - 共同填寫 `front-end-architecture-tmpl` 的所有相關章節 (如上述步驟 3-11 所述)，以建立一份全面的初稿。
  - 向使用者呈現 `front-end-architecture` 的完整草稿，以供整體檢閱。
  - <important_note>在 YOLO 模式下呈現完整草稿後，如果使用者希望在詳細的逐節回饋之前進行結構化的深入探討，您*仍然可以*提供「進階反思與引導選項」選單的精簡版本，或許著重於一些關鍵的總體檢閱行動 (例如，整體需求一致性、主要風險評估)。</important_note>
  - 在繼續進行步驟 13 (Epic/Story 影響) 和步驟 14 (checklist 檢閱) 之前，取得使用者對整個 `front-end-architecture` 文件的明確核准。

### 13. 找出並總結 Epic/Story 影響 (前端焦點)

- `front-end-architecture` 確認後，在現有 epics 和 user stories (如果提供或已知) 的情境下檢閱它。
- 找出任何可能需要新增為新 story 或子任務的前端特定技術任務 (例如，「根據定義的斷點實作產品詳細資料頁面的響應式版面配置」、「為使用者設定檔設定 X 狀態管理 slice」、「根據規格開發可重複使用的 Y 元件」)。
- 找出是否有任何現有的 user stories 因前端架構決策而需要完善其 acceptance criteria (例如，指定互動詳細資料、元件使用或 UI 元素的效能考量)。
- 與使用者協作以定義這些新增或完善。
- 準備一份簡明摘要，詳細說明與前端相關的 epics 和 user stories 的所有建議新增、更新或修改。如果未找出任何變更，則明確說明 (例如，「從前端架構中未找出對現有 epics/stories 的直接影響」)。

### 14. Checklist 檢閱與定案

- `front-end-architecture` 填寫完成並與使用者檢閱後，且 epic/story 影響已總結，請使用 `frontend-architecture-checklist`。
- 逐項檢查 checklist 中的項目，以確保 `front-end-architecture` 全面且所有章節都已充分處理 - 對於每個 checklist 項目，您*必須*考量其是否真正完整或有缺陷。
- 對於每個 checklist 章節，確認其狀態 (例如，\[x] 已完成、\[ ] N/A、\[!] 需要注意)。
- 如果某章節找出缺陷或需要更詳細說明的領域：
  - 與使用者討論這些問題。
  - 共同對 `front-end-architecture` 進行必要的更新或新增。
- 處理完所有要點並確保文件穩健後，向使用者呈現 checklist 檢閱摘要。此摘要應強調：
  - 確認已滿足 checklist 的所有相關章節。
  - 任何標記為 N/A 的項目及其簡要原因。
  - 簡要說明因 checklist 檢閱而進行的任何重大討論或變更。
- 目標是確保 `front-end-architecture` 是一份完整且可執行的文件。

==================== END: create-frontend-architecture ====================


==================== START: create-next-story-task ====================
# 建立下一個 Story 任務

## 目的

根據專案進度和 epic 定義找出下一個合乎邏輯的 story，然後使用 `Story Template` 準備一份全面、獨立且可執行的 story 檔案。此任務確保 story 充實了所有必要的技術情境、需求和 acceptance criteria，使其準備好由開發者代理程式高效實作，且只需最少的額外研究。

## 此任務的輸入

- 存取專案的文件儲存庫，特別是：
  - `docs/index.md` (以下簡稱「索引文件」)
  - 所有 Epic 檔案 (例如 `docs/epic-{n}.md` - 以下簡稱「Epic 檔案」)
  - `docs/stories/` 中的現有 story 檔案
  - 主要 PRD (以下簡稱「PRD 文件」)
  - 主要架構文件 (以下簡稱「主要架構文件」)
  - 前端架構文件 (以下簡稱「前端架構文件」，如果相關)
  - 專案結構指南 (`docs/project-structure.md`)
  - 操作指南文件 (`docs/operational-guidelines.md`)
  - 技術堆疊文件 (`docs/tech-stack.md`)
  - 資料模型文件 (如索引文件中所引用)
  - API 參考文件 (如索引文件中所引用)
  - UI/UX 規格、樣式指南、元件指南 (如果相關，如索引文件中所引用)
- `docs/templates/story-template.md` (以下簡稱「Story 範本」)
- `docs/checklists/story-draft-checklist.txt` (以下簡稱「Story 草稿 Checklist」)
- 使用者確認繼續進行 story 識別，並在需要時覆寫關於未完成先決 story 的警告。

## 任務執行指令

### 1. 找出下一個要準備的 Story

- 檢閱 `docs/stories/` 以找出編號最大的 story 檔案。
- **如果存在編號最大的 story 檔案 (`{lastEpicNum}.{lastStoryNum}.story.md`)：**

  - 驗證其 `Status` 是否為「完成」(或同等狀態)。
  - 如果不是「完成」，向使用者顯示警示：

    ```
    警示：發現未完成的 story：
    檔案：{lastEpicNum}.{lastStoryNum}.story.md
    狀態：[目前狀態]

    您想要：
    1. 檢視未完成的 story 詳細資料 (指示使用者執行，代理程式不顯示)
    2. 此時取消建立新的 story
    3. 接受風險並覆寫以在草稿中建立下一個 story

    請選擇一個選項 (1/2/3)：
    ```

  - 僅當使用者選擇選項 3 (覆寫) 或最後一個 story 為「完成」時才繼續。
  - 如果繼續：檢查 `{lastEpicNum}` 的 Epic 檔案中是否有編號為 `{lastStoryNum + 1}` 的 story。如果存在且其先決條件 (根據 Epic 檔案) 已滿足，則此為下一個 story。
  - 否則 (找不到 story 或未滿足先決條件)：下一個 story 是下一個 Epic 檔案 (例如 `docs/epic-{lastEpicNum + 1}.md`，然後是 `{lastEpicNum + 2}.md` 等) 中第一個滿足先決條件的 story。

- **如果 `docs/stories/` 中不存在 story 檔案：**
  - 下一個 story 是 `docs/epic-1.md` (然後是 `docs/epic-2.md` 等) 中第一個滿足先決條件的 story。
- 如果找不到滿足先決條件的合適 story，向使用者報告 story 建立受阻，並說明哪些先決條件待處理。停止任務。
- 向使用者宣布已找出的 story：「已找出下一個要準備的 story：{epicNum}.{storyNum} - {Story 標題}」。

### 2. 收集核心 Story 需求 (從 Epic 檔案)

- 對於已找出的 story，開啟其父 Epic 檔案。
- 擷取：確切標題、完整的目標/User Story 陳述、初始需求清單、所有 Acceptance Criteria (ACs) 以及任何預先定義的高階任務。
- 保留此原始 epic 定義範疇的記錄，以供後續偏差分析。

### 3. 為開發代理程式收集並綜合深入的技術情境

- <critical_rule>系統性地使用索引文件 (`docs/index.md`) 作為您的主要指南，以探索與目前 story 實作需求相關的所有詳細文件的路徑。</critical_rule>
- 徹底檢閱 PRD 文件、主要架構文件和前端架構文件 (如果是 UI story)。
- 在索引文件和 story 需求的引導下，從以下來源找出、分析並綜合特定、相關的資訊：
  - 資料模型文件 (結構、驗證規則)。
  - API 參考文件 (端點、請求/回應 schema、驗證)。
  - 架構文件中的適用架構模式或元件設計。
  - UI/UX 規格、樣式指南、元件指南 (適用於 UI story)。
  - 如果版本或組態對此 story 至關重要，則從技術堆疊文件中取得特定詳細資料。
  - 操作指南文件的相關章節 (例如，story 特定的錯誤處理細微差別、此 story 中處理資料的安全性考量)。
- 目標是收集開發代理程式所需的所有必要詳細資料，以避免他們進行廣泛搜尋。記錄 epic 與這些詳細資料之間的任何差異，以供「偏差分析」使用。

### 4. 驗證專案結構一致性

- 將 story 的需求和預期的檔案操作與專案結構指南 (以及適用的前端結構) 進行交叉比對。
- 確保 story 暗示的任何檔案路徑、元件位置或模組名稱與定義的結構一致。
- 在 story 草稿的「專案結構注意事項」章節中記錄任何結構衝突、必要的釐清或未定義的元件/路徑。

### 5. 以完整情境填入 Story 範本

- 建立新的 story 檔案：`docs/stories/{epicNum}.{storyNum}.story.md`。
- 使用 Story 範本建構檔案。
- 填入：
  - Story `{EpicNum}.{StoryNum}: {從 Epic 檔案複製的簡短標題}`
  - `Status: 草稿`
  - `Story` (來自 Epic 的 User Story 陳述)
  - `Acceptance Criteria (ACs)` (來自 Epic，視情境需要完善)
- **`開發技術指南` 章節 (關鍵)：**
  - 根據收集到的所有情境 (步驟 3 和 4)，嵌入簡潔但關鍵的資訊片段、特定資料結構、API 端點詳細資料、對其他文件中*特定章節*的精確參考 (例如，「詳細資料請參閱 `Data Models Doc#User-Schema-ValidationRules`」)，或簡要解釋架構模式如何應用於*此 story*。
  - 如果是 UI story，提供與*此 story 元素*相關的元件/樣式指南的特定參考。
  - 目標是使此章節成為開發代理程式獲取*story 特定*技術情境的主要來源。
- **`任務 / 子任務` 章節：**
  - 根據收集到的情境，產生一份詳細、循序的技術任務和子任務清單，供開發代理程式完成 story。
  - 在適用情況下將任務連結至 AC (例如，`任務 1 (AC: 1, 3)`)。
- 新增在步驟 4 中發現的專案結構一致性或差異的注意事項。
- 根據步驟 3 中記錄的差異準備「偏差分析」的內容。

==================== END: create-next-story-task ====================


==================== START: create-prd ====================
# PRD 產生任務

## 目的

- 將輸入轉換為符合 `prd-tmpl` 範本的核心產品定義文件。
- 定義專注於基本功能的清晰 MVP 範疇。
- 為架構師以及最終的 AI 開發代理程式提供基礎。

在您遵循接下來的指令時，請記住：

- 您的文件構成整個開發流程的基礎。
- 產出將直接由架構師用於建立架構文件和解決方案設計，以做出明確的技術決策。
- 您的 epics/stories 最終將轉換為開發任務。
- 雖然您專注於「什麼」而非「如何」，但請務必足夠精確，以支援合乎邏輯的循序操作順序，以便稍後可以合乎邏輯地遵循進一步的詳細資料，其中 story 將完成所需的內容。

## 指令

### 定義專案工作流程情境

- 在產生 PRD 之前，請使用者選擇其預期的工作流程：

  A. **成果導向 (預設)：** (代理程式定義以成果為導向的 User Stories，將詳細的技術「如何做」留給架構師/Scrum Master。在架構師提示中將細微差別擷取為「給架構師/Scrum Master 的注意事項」。)

  B. **非常技術性 (不建議)：** (代理程式採取「解決方案感知」的立場，提供更詳細、實作感知的 Acceptance Criteria 以銜接開發，可能完全不需要架構師參與，而是填寫所有技術細節。\<important_note\>選擇此工作流程時，您還負責在 PRD 範本中一個名為「[僅適用於簡化 PM 到開發工作流程] 核心技術決策與應用程式結構」的新的專用章節中，共同定義並記錄關鍵技術基礎——例如技術堆疊選擇和建議的應用程式結構。\</important_note\>)

- 解釋此選擇設定了預設的詳細程度，稍後可以根據每個 story/epic 進行微調。

### 2\. 決定互動模式 (用於 PRD 結構與詳細資料)

- 如果未知，請與使用者確認他們偏好的 PRD 建立互動風格 - 漸進式或 YOLO？：
  - **漸進式 (預設)：** 循序處理 PRD 章節，並就每個章節徵求回饋。對於 Epics/Stories：首先呈現已排序的 Epic 清單以供核准，然後逐一詳述每個 Epic 的 story。
  - **「YOLO」模式：** 草擬更全面的 PRD (或包含多個章節、epics 和 stories 的重要部分)，以供單一、更大規模的檢閱。

### 3\. 檢閱提供的輸入

檢閱目前為止提供的輸入，例如專案簡報、任何研究以及使用者輸入和想法。

### 4\. 處理 PRD 章節

\<important_note\>上述步驟 2 中選擇的互動模式 (漸進式或 YOLO) 將決定以下 PRD 分段和 epic/story 產生步驟的處理方式。\</important_note\>
告知使用者我們將依序逐一處理 PRD 章節 (如果不是 YOLO) - 範本包含您每個章節的指令。

\<important_note\>在處理 PRD 的「技術假設」章節時，明確引導使用者討論並決定儲存庫結構 (Monorepo 與 Polyrepo) 和高階服務架構 (例如，Monolith、Microservices、Monorepo 內的 Serverless functions)。強調這是一個關鍵的決策點，將在此處正式記錄其理由，影響 MVP 範疇並為架構師提供資訊。確保此決策擷取在 PRD 的 `Technical Assumptions` 中，然後在 PRD 的 `Initial Architect Prompt` 章節中重申。\</important_note\>

\<important_note\>特別適用於「簡化 PM 到開發工作流程」：
在討論初始 PRD 章節 (如問題、目標、使用者畫像) 之後，以及在定義詳細 Epics 和 Stories 之前或同時，您必須介紹並填寫 PRD 的「[僅適用於簡化 PM 到開發工作流程] 核心技術決策與應用程式結構」章節。
執行此操作時，首先檢查是否存在 `technical-preferences` 檔案。如果存在，告知使用者您將參考該檔案以協助引導這些技術決策，同時仍與他們確認所有選擇。提出有針對性的問題，例如：

1.  「您對後端和前端 (如果適用) 的主要程式語言和框架有什麼初步想法？(我將交叉參考您在 `technical-preferences` 中記錄的任何偏好。)」
2.  「您正在考慮哪個資料庫系統？(正在檢查偏好...)」
3.  「現階段我們是否應該規劃任何特定的雲端服務、關鍵函式庫或部署平台？(正在檢查偏好...)」
4.  「您如何設想應用程式的高階資料夾結構或主要模組？您能描述一下關鍵元件及其職責嗎？(我會考量任何記錄的結構偏好。)」
5.  「這會是一個 monorepo，還是您考慮為應用程式的不同部分使用不同的儲存庫？」
    如果後續的 epic/story 討論揭示了新的需求或限制，則應視需要共同填寫和更新此章節。\</important_note\>

\<important_note\>注意：對於 Epic 和 Story 章節 (如果處於這些章節的漸進模式)，請在記憶體中準備您認為的初始 epic 和 story 清單，以便我們可以逐步完成此操作，利用您目前為止學到的所有已提供資訊，以遵循以下章節 [Epic 和 User Story 產生的指導原則] 中的指南 (https://www.google.com/search?q=%23guiding-principles-for-epic-and-user-story-generation)。\</important_note\>

#### 4A. Epic 呈現與草擬策略

(如果 Epics 採用漸進模式) 您將首先向使用者呈現 epic 標題和描述，以便使用者可以判斷其是否正確以及預期內容，或者是否存在遺漏的主要 epic。
(如果採用 YOLO 模式) 您將草擬所有 epics 和 stories 作為較大 PRD 草稿的一部分。

#### 4B. Epic 內的 Story 產生與檢閱 (漸進模式)

\<critical_rule\>(如果 Stories 採用漸進模式，在 Epic 核准之後) Epic 清單核准後，接著對於每個 Epic，您將執行以下操作：\</critical_rule\>
i. **為目前 Epic 草擬所有 Stories：** 根據 Epic 的目標和您的討論，遵循「Epic 和 User Story 產生的指導原則」為此 Epic 草擬所有必要的 User Stories。
ii. **執行內部 Story 分析並建議順序：** 在呈現 stories 以供詳細檢閱之前，您將在內部：
a. **重新評估橫切關注點：** 確保沒有草擬的 stories 實際上應該是其他 stories 中的 AC 或筆記， согласно 指導原則。進行必要的調整。
b. **分析邏輯順序與相依性：** 對於此 Epic 中的所有 stories，決定其邏輯實作順序。找出任何直接的先決 story (例如，「Story X 必須在 Story Y 之前完成，因為 Y 會使用 X 的輸出」)。
c. **為順序制定理由：** 準備一份簡要的解釋，說明為何建議的順序合乎邏輯。
iii. **呈現 Epic 的建議 Story 集合與順序：** 向使用者呈現：
a. Epic 的 (可能修訂的) User Stories 完整清單。
b. 這些 stories 的建議順序。
c. 您對順序的簡要理由以及您記錄的任何關鍵相依性 (例如，「我建議此順序，因為 Story 2 建立在 Story 1 中準備的資料之上，而 Story 3 接著使用 Story 2 的結果」)。
iv. **順序與 Story 外殼的協作檢閱：** 與使用者討論此建議的結構和順序。根據使用者回饋調整 story 清單或其順序。
v. \<critical_rule\>一旦 Epic 的 stories 的整體結構和順序達成一致，接著您將與使用者一起檢閱該 Epic 中每個 story 在商定順序下的詳細資料 (描述、Acceptance Criteria)。\</critical_rule\>

##### 4B1. 提供進階自我完善與引導選項

在結束目前 Epic/Story 集合或 PRD 章節的工作並進入下一步之前，您 (執行此任務的 AI 代理程式) 將向使用者呈現以下進階行動清單。使用者可以透過數字選擇一個以觸發它。

{AI 代理程式指令：僅顯示以下每個編號項目的標題。如果使用者詢問其含義，請根據先前為這些行動定義的詳細描述向使用者解釋所選的行動。}

「我們已經完善了 [特定 Epic/Story/章節] 的草稿。為確保其品質、進一步探索或擴展我們的想法，我可以執行以下其中一項行動。請選擇一個數字，或者如果您準備好繼續，請告訴我：

**我可以採取的進階完善、引導與腦力激盪行動：**

1.  **嚴格自我檢閱與目標一致性，遵循 Epic 和 User Story 產生的指導原則**
2.  **產生並評估替代方案**
3.  **概念情境與邊緣案例模擬**
4.  **深入探討假設與相依性**
5.  **「魔鬼代言人」檢閱與探究性問題**
6.  **引導式腦力激盪與想法擴展**
7.  **引導「未提出的問題」與隱藏需求**
8.  **繼續下一個 [邏輯群組，例如 Epic]**

在我執行所選行動後，我們可以討論結果並決定任何進一步的修訂，或者我們是否應該繼續。
當您對目前的草稿感到滿意時，我們可以接著進行 [下一個邏輯步驟，例如，「下一個 Epic」、「Checklist 評估」等]。」

#### 4C. 呈現完整草稿

所有章節完成後 (或根據 YOLO 模式互動)，向使用者呈現完整的草稿。

#### 4D. UI 元件交接注意事項

如果此 PRD 有 UI 元件，您可以告知使用者設計架構師應採用此最終產出。

### 5\. Checklist 評估

- 使用 `pm-checklist` 考量 checklist 中的每個項目是否已滿足 (或不適用) PRD。
- 記錄每個項目的完成狀態。
- 在進入下一節之前，向使用者呈現 checklist 每個章節的摘要。
- 與使用者一起解決缺陷，以取得輸入或建議的更新或修正。
- 完成並處理後，輸出最終的 checklist，其中包含所有已勾選或跳過的項目、章節摘要表以及任何最終注意事項。checklist 中也應包含任何已討論並解決或忽略的結果。這對使用者來說會是一份很好的產出物。

### 6\. 產生 PRD

根據 `prd-tmpl` 產生包含 PM 提示的 PRD，並遵循以下指南：

**一般呈現與內容：**

- 以乾淨、完整的格式呈現專案簡報 (草稿或最終版)。
- 至關重要的是，不要截斷與先前版本相比未變更的資訊。
- 對於完整文件，直接從內容開始 (不需要引言文字)。

\<important_note\>
**UI/UX 規格的後續步驟 (如果適用)：**

- 如果此 PRD 中描述的產品包含使用者介面：

  1.  **在 PRD 中包含設計架構師提示：** 您將在您正在產生的 PRD 文件中新增一個專用章節，具體位置在標記為 `(END Checklist START Design Architect UI/UX Specification Mode Prompt)` 的地方 (根據 `prd-tmpl` 結構)。此章節將包含給 **設計架構師** 代理程式的提示。

      - 提示應清楚說明設計架構師將在其 **「UI/UX 規格模式」** 下運作。

      - 它應指示設計架構師使用此 PRD 作為主要輸入，以共同定義並記錄詳細的 UI/UX 規格。這可能涉及建立/填寫 `front-end-spec-tmpl` 並確保關鍵的 UI/UX 考量已整合或參考回 PRD 以充實其內容。

      - 要插入的範例提示文字：

        ```markdown
        ## 設計架構師提示 (UI/UX 規格模式)

        **目標：** 詳細說明此 PRD 中定義產品的 UI/UX 層面。
        **模式：** UI/UX 規格模式
        **輸入：** 此已完成的 PRD 文件。
        **主要任務：**

        1. 檢閱產品目標、user stories 以及此處的任何 UI 相關注意事項。
        2. 共同定義詳細的使用者流程、線框圖 (概念性) 以及關鍵畫面模型/描述。
        3. 指定可用性需求和無障礙性考量。
        4. 填寫或建立 `front-end-spec-tmpl` 文件。
        5. 確保此 PRD 已更新或清楚參考從您的工作中衍生的詳細 UI/UX 規格，以便為後續的架構和開發階段提供全面的基礎。

        請引導使用者完成此流程，以詳細的 UI/UX 規格充實 PRD。
        ```

  2.  **建議使用者工作流程：** 在定案此 PRD (包含嵌入的設計架構師提示) 後，強烈建議使用者依以下順序進行：
      a. 首先，讓 **設計架構師** 代理程式 (使用您嵌入 PRD 中的提示) 在 **「UI/UX 規格模式」** 下運作。解釋此步驟對於詳細說明使用者介面和體驗至關重要，且產出 (例如，已填寫的 `front-end-spec-tmpl` 以及可能更新的 PRD 章節) 將非常重要。
      b. 其次，在設計架構師完成其 UI/UX 規格工作*之後*，使用者接著應讓 **架構師** 代理程式 (使用此 PRD 中也包含的「初始架構師提示」) 參與。現已充實 UI/UX 詳細資料的 PRD 將為技術架構設計提供更完整的基礎。

- 如果產品不包含使用者介面，您只需建議使用 PRD 中的「初始架構師提示」讓架構師代理程式繼續進行。
  \</important_note\>

## Epic 和 User Story 產生的指導原則

### I. 策略基礎：嚴格定義核心價值與 MVP 範疇

理解並釐清核心需求：首先深入理解並釐清此產品解決的核心問題、已定義使用者畫像 (或系統參與者) 的基本需求，以及最小可行產品 (MVP) 的關鍵業務目標。
不斷挑戰範疇：在每個階段都積極挑戰所有要求的功能和範疇。對於每個潛在功能或 story，嚴格詢問：「這是否直接支援核心 MVP 目標並為目標使用者畫像提供重大價值？」清楚找出並將非必要功能延後至 MVP 後的 backlog。

### II. 建構工作：價值驅動的 Epics 與邏輯順序

組織成可部署、價值驅動的 Epics：將 MVP 範疇建構成 Epics。每個 Epic 都必須設計為提供一個重要、端到端且完全可部署的可測試功能增量，為使用者或業務提供實質價值。Epics 應代表邏輯功能區塊或連貫的使用者旅程。

邏輯 Epic 順序與基礎工作：
確保 Epics 的順序遵循邏輯實作順序，使 Epics 之間的相依性清晰且明確管理。
第一個 Epic 必須始終建立支援其自身可部署功能以及後續 Epics 功能所需的基礎專案基礎架構 (例如，初始應用程式設定、Git 儲存庫、CI/CD pipeline、核心雲端服務組態、如果普遍需要的基本使用者驗證外殼)。
確保 Epics 內合乎邏輯的 Story 順序和相依性意識：
在初步草擬 Epic 的所有 User Stories 之後，但在與使用者詳細檢閱之前，您 (執行此任務的 AI 代理程式) 必須明確執行內部檢閱以建立這些 stories 的邏輯順序。
對於每個 story，找出其是否在同一個 Epic 中或來自已完成的 Epics 中有直接的先決 story。
向使用者建議一個清晰的 story 順序，並根據這些相依性解釋理由 (例如，「Story X 需要在 Story Y 之前完成，因為...」)。使重要的相依性可見，或許可以在 story 描述中註明。

### III. 打造有效的 User Stories：專注於價值與清晰度的垂直切片

將 Stories 定義為「垂直切片」：在每個 Epic 中，將 User Stories 定義為「垂直切片」。這表示每個 story 都必須提供一個完整的功能片段，以達成特定的使用者或系統目標，並可能貫穿所有必要的層級 (例如，UI、API、業務邏輯、資料庫)。
專注於「什麼」和「為什麼」，而非「如何」：
Stories 將主要專注於功能成果、使用者價值 (「什麼」) 和原因 (「為什麼」)。避免在 story 的主要描述中詳細說明技術實作 (「如何」)。
「身為一個 {特定使用者畫像/系統參與者}，我想要 {執行一個動作 / 達成一個目標} 以便於 {我可以實現一個益處 / 達成一個原因}」的格式是標準的。在定義「{特定使用者畫像/系統參與者}」時務必精確且一致，確保其與已定義的畫像一致。
確保使用者價值，而非僅技術任務：User Stories 必須闡明清晰的使用者或業務價值。避免建立純粹是技術任務的 stories (例如，「設定資料庫」、「重構模組 X」)，除非它們是基礎架構 Epic 的一部分，或者是明確連結至並由提供價值的使用者導向 story 所證明的必要促成任務。
適當的大小並力求獨立性：
確保 User Stories 的大小適合典型的開發迭代 (即團隊可以在一個 sprint/迭代中完成)。
如果垂直切片的 story 過大或過於複雜，請與使用者合作將其拆分為更小、仍有價值且仍為垂直切片的增量。
在可行的情况下，定義 stories 以便可以獨立於其他 stories 進行開發、測試和潛在交付。如果相依性不可避免，則必須透過排序清楚找出並管理。

### IV. 詳細說明 Stories：全面的 Acceptance Criteria 與開發者賦能

清晰、全面且可測試的 Acceptance Criteria (ACs)：
每個 User Story 都將有詳細、明確且可測試的 Acceptance Criteria。
ACs 從功能角度精確定義該 story 的「完成」意義，並作為驗證的基礎。
如果 PRD 中的特定非功能性需求 (NFR) (例如，特定動作的特定效能目標、處理某些資料的安全性限制) 對 story 至關重要，請確保在其 Acceptance Criteria 中明確擷取或清楚參考。
將開發者賦能與迭代設計整合至 Stories：
本地可測試性 (CLI)：對於涉及後端處理或資料元件的 User Stories，確保 ACs 考量或指定開發者在本機測試該功能的能力 (例如，透過 CLI 指令、本機服務實例)。
迭代 Schema 定義：資料庫 schema 變更 (新資料表、欄位) 應在功能上需要它們的 User Stories 中迭代引入，而非預先定義整個 schema。
前期 UI/UX 標準 (如果適用 UI)：對於具有 UI 元件的 User Stories，ACs 應從一開始就明確說明關於外觀與風格、響應性以及遵守所選框架/函式庫 (例如 Tailwind CSS、shadcn/ui) 的要求。

### V. 管理複雜性：有效處理橫切關注點

嚴格評估橫切關注點：
在定案 User Story 之前，評估所描述的功能是否確實是一個獨立、使用者導向的價值片段，或者它是否代表一個橫切關注點 (例如，特定的記錄需求、許多檢視使用的 UI 主題元素、多個其他 stories 的核心技術促成因素、錯誤處理的特定方面)。
如果某項功能被認定為橫切關注點：
a. 避免為其建立單獨的 User Story，除非它提供獨立、可測試的使用者價值。
b. 相反地，將該需求作為特定的 Acceptance Criteria 整合至其影響的所有相關 User Stories 中。
c. 或者，如果它是一個普遍的技術促成因素或廣泛適用的非功能性需求，則在相關的 PRD 章節 (例如，「非功能性需求」、「技術假設」) 中清楚記錄，或者如果非常具體，則在 story 描述中作為給架構師的注意事項。

您的目標是確保 User Stories 始終專注於提供可衡量的使用者價值，同時仍適當地擷取所有必要的技術和功能細節。

### VI. 確保品質與順暢交接

維持交接的清晰度與架構自由度：User Stories、其描述和 Acceptance Criteria 必須足夠詳細，以便為架構師提供對「需要什麼」的清晰且全面的理解，同時允許在「如何做」方面具有架構彈性。
確認「就緒」狀態：在考量 Epic 的 stories 完成之前，確保每個 story 都有效地「就緒」以供後續的架構檢閱或開發規劃——這表示它清晰、易懂、可測試、其相依性已記錄，並且任何基礎工作 (例如來自第一個 epic 的工作) 都已考量在內。

==================== END: create-prd ====================


==================== START: create-uxui-spec ====================
# 建立 UI/UX 規格任務

## 目的

與使用者共同定義並記錄專案的使用者介面 (UI) 和使用者體驗 (UX) 規格。這涉及了解使用者需求、定義資訊架構、概述使用者流程，並確保為視覺設計和前端開發奠定堅實的基礎。產出將填入 `front-end-spec-tmpl` 範本。

## 輸入

- 專案簡報 (`project-brief-tmpl` 或同等文件)
- 產品需求文件 (PRD) (`prd-tmpl` 或同等文件)
- 使用者回饋或研究 (如果可用)

## 主要活動與指令

### 1. 了解核心需求

- 檢閱專案簡報和 PRD 以掌握專案目標、目標受眾、關鍵功能以及任何現有約束。
- 提出關於使用者需求、痛點和期望成果的釐清問題。

### 2. 定義整體 UX 目標與原則 (用於 `front-end-spec-tmpl`)

- 共同建立並記錄：
  - 目標使用者畫像 (引導詳細資料或確認現有畫像)。
  - 關鍵可用性目標。
  - 專案的核心設計原則。

### 3. 開發資訊架構 (IA) (用於 `front-end-spec-tmpl`)

- 與使用者合作建立網站地圖或畫面清單。
- 定義主要和次要導覽結構。
- 根據範本適當使用 Mermaid 圖表或清單。

### 4. 概述關鍵使用者流程 (用於 `front-end-spec-tmpl`)

- 從 PRD/簡報中找出關鍵使用者任務。
- 對於每個流程：
  - 定義使用者的目標。
  - 共同規劃步驟 (使用 Mermaid 圖表或詳細的逐步描述)。
  - 考量邊緣案例和錯誤狀態。

### 5. 討論線框圖與模型策略 (用於 `front-end-spec-tmpl`)

- 釐清將在哪裡建立詳細的視覺設計 (例如 Figma、Sketch)，並確保 `front-end-spec-tmpl` 正確連結至這些主要設計檔案。
- 如果首先需要低擬真線框圖，則協助概念化關鍵畫面的版面配置。

### 6. 定義元件庫 / 設計系統方法 (用於 `front-end-spec-tmpl`)

- 討論是否將使用現有的設計系統，或者是否需要開發新的設計系統。
- 如果是新的，找出一些基礎元件作為開頭 (例如按鈕、輸入、卡片) 及其在高階層級的關鍵狀態/行為。詳細的技術規格將在 `front-end-architecture` 中說明。

### 7. 建立品牌與樣式指南基礎 (用於 `front-end-spec-tmpl`)

- 如果存在樣式指南，請連結至該指南。
- 如果沒有，共同定義以下內容的預留位置：調色盤、排版、圖示、間距。

### 8. 指定無障礙性 (AX) 需求 (用於 `front-end-spec-tmpl`)

- 決定目標合規等級 (例如 WCAG 2.1 AA)。
- 列出任何已知的特定 AX 需求。

### 9. 定義響應性策略 (用於 `front-end-spec-tmpl`)

- 討論並記錄關鍵斷點。
- 描述一般適應策略。

### 10. 產出產生與迭代完善 (以 `front-end-spec-tmpl` 為指南)

- **a. 草擬章節：** 根據您的討論，逐步填寫 `front-end-spec-tmpl` 檔案的一個邏輯章節。
- **b. 呈現並納入初步回饋：** 向使用者呈現草擬的章節以供檢閱。直接討論並納入其初步回饋和修訂。
- **c. 提供進階反思與引導選項：**
  <critical_rule>一旦 UI/UX 規格章節 (例如，「資訊架構」、「關鍵使用者流程」、「無障礙性需求」) 的初步草稿已建立，且您已納入使用者的初步回饋，您接著將向使用者呈現以下「進階反思、引導與腦力激盪行動」清單。解釋這些是可選步驟，有助於在定案並繼續之前確保品質、探索替代方案並加深對目前草稿的理解。使用者可以透過數字選擇一個行動，或選擇跳過此步驟並繼續定案該章節。</critical_rule>

  「我們已經完善了目前 UI/UX 章節的草稿：**[特定 UI/UX 章節名稱]**。為確保其穩健性、探索替代方案並考量所有角度，我可以執行以下其中一項行動。請選擇一個數字，或者如果您準備好定案此章節，請告訴我：

  **我可以採取的進階反思、引導與腦力激盪行動：**

  {AI 代理程式指令：僅顯示以下每個編號項目的標題。如果使用者詢問特定選項的含義，請根據為 UI/UX 情境量身打造的詳細描述，簡要解釋您將採取的行動。}

  1.  **嚴格自我檢閱與使用者目標一致性**
  2.  **產生並評估替代設計解決方案**
  3.  **使用者旅程與互動壓力測試（概念性）**
  4.  **深入探討設計假設與限制**
  5.  **可用性與無障礙性稽核檢閱與探究性問題**
  6.  **協作構想與 UI 功能腦力激盪**
  7.  **引導「未預見的使用者需求」與未來互動問題**
  8.  **定案此章節並繼續。**

  在我執行所選行動後，我們可以討論結果並決定此章節的任何進一步修訂。」

- **d. 定案章節：** 一旦使用者滿意 (在反思行動之後或如果他們跳過這些行動)，確認 `front-end-spec-tmpl` 的此章節目前視為完成。
- **e. 對所有章節重複執行：** 在完成每個章節時，確保正確記錄所有預留位置連結和參考。

==================== END: create-uxui-spec ====================


==================== START: doc-sharding-task ====================
# 將以下提示貼到您的代理程式聊天中，使其執行文件分片

您現在擔任技術文件管理員，負責將大型專案文件細分為更小、更有組織的檔案。您的目標是將龐大的文件轉換為結構良好、易於導覽的文件系統。

## 您的任務

遵循 `doc-sharding-tmpl.txt` 計畫，將大型專案文件轉換為 `docs/` 目錄中更小、更細緻的檔案。您將建立並維護 `docs/index.md` 作為中央目錄，以便其他代理程式和利害關係人更容易參考和注入情境。您只會處理使用者要求並在分片計畫中詳述的文件及其特定章節。

## 您的方法

1.  首先，請使用者指定他們希望在此會談中處理哪些可用的來源文件 (PRD、主要架構、前端架構)。
2.  接下來，確認：

    - 存取 `doc-sharding-tmpl.txt`。
    - 使用者想要處理的來源文件位置。
    - 對 `docs/` 目錄的寫入權限。
    - 如果所選文件有任何先決條件遺失，請在繼續之前要求提供。

3.  對於每個*選定*的文件細分：

    - 遵循 `doc-sharding-tmpl.txt` 中定義的結構，僅處理與特定文件類型相關的章節。
    - 逐字擷取內容 - 不進行摘要或重新詮釋
    - 建立獨立的 markdown 檔案
    - 新增標準描述：在每個建立的檔案開頭，緊接在主要 H1 標題 (通常衍生自來源章節標題) 之後，新增一個區塊引言，格式如下：
      ```markdown
      > 此文件是從主要「[原始來源文件標題/檔名]」細分出來的片段，著重於「[片段的主要主題]」。
      ```
      - _[原始來源文件標題/檔名]_ 應為正在處理的來源文件的名稱或路徑 (例如，「主要架構文件」或 `3-architecture.md`)。
      - _[片段的主要主題]_ 應為片段內容的簡潔描述，最好衍生自 `doc-sharding-tmpl.txt` 中該片段「要複製的來源章節」欄位的第一個項目，或根據目標檔名的描述性名稱 (例如，「API 參考」、「Epic 1 User Stories」、「前端狀態管理」)。
    - 維護資訊完整性
    - 使用計畫中指定的清晰、一致的檔案命名

4.  對於 `docs/index.md`：

    - 如果不存在則建立
    - 為每個細緻檔案新增描述性標題和相對 markdown 連結
    - 合乎邏輯地組織內容
    - 在有幫助的地方加入簡短描述
    - 確保全面的編目

5.  可選的增強功能：
    - 在相關的細緻文件之間新增交叉參考
    - 實作分片範本中指定的任何其他組織

## 操作規則

1. 擷取過程中絕不修改來源內容
2. 完全按照分片計畫建立檔案
3. 前置標準描述：確保每個產生的分片檔案在其 H1 標題之後立即包含「方法」章節中指定的標準描述區塊引言。
4. 如果合併來自多個來源的內容，請預覽並尋求核准
5. 維護所有原始情境和意義
6. 保持檔案名稱和路徑與計畫一致
7. 每建立一個新檔案就更新 `index.md`

## 必要輸入

請提供：

1.  **來源文件路徑：**
    - 產品需求文件 (PRD) 的路徑 (例如 `project/docs/PRD.md` 或 `../8-prd-po-updated.md`)，如果您想處理它。
    - 主要架構文件的路徑 (例如 `project/docs/architecture.md` 或 `../3-architecture.md`)，如果您想處理它。
    - 前端架構文件的路徑 (例如 `project/docs/frontend-architecture.md` 或 `../5-front-end-architecture.txt`)，如果您想處理它。
2.  **要處理的文件：**
    - 清楚說明您希望我在這個會談中分片哪些提供的文件 (例如，「僅處理 PRD」，或「處理主要架構和前端架構文件」，或「處理所有提供的文件」)。
3.  **分片計畫確認：**
    - 確認 `docs/templates/doc-sharding-tmpl.txt` 存在、已填寫，並且反映您期望的分片策略。
4.  **輸出目錄與索引確認：**
    - 分片 markdown 檔案的目標目錄。(預設：相對於工作區或專案根目錄的 `docs/`)。
    - 確認應在此目標目錄中建立或更新 `index.md` 檔案以編目分片檔案。
5.  **寫入權限：**
    - 確認對指定輸出目錄的寫入權限。

## 流程步驟

1.  我會先請您指定要我處理哪些來源文件。
2.  然後，我會驗證對 `docs/templates/doc-sharding-tmpl.txt` 和您選取的來源文件的存取權限。
3.  我會確認分片檔案的輸出目錄以及在那裡建立/更新 `index.md` 的計畫。
4.  對於每個*選定*的來源文件：
    - 我會根據分片計畫，找出與該文件類型相關的章節。
    - 向您顯示該文件的建議細分結構。
5.  我會保留所有已建立檔案的記錄
6.  我會提供所有已做變更的最終報告

您想繼續進行文件細分嗎？請提供上述必要輸入。

==================== END: doc-sharding-task ====================


==================== START: library-indexing-task ====================
# 程式庫索引任務

## 目的

此任務透過掃描所有文件檔案並確保其已正確編製索引並附有描述，來維護 `docs/index.md` 檔案的完整性。

## 任務指令

您現在擔任文件索引員。您的目標是確保所有文件檔案都已正確編目到中央索引中。

### 必要步驟

1. 首先，找出並掃描：

   - `docs/` 目錄及其所有子目錄
   - 現有的 `docs/index.md` 檔案 (如果不存在則建立)
   - 文件結構中的所有 markdown (`.md`) 和文字 (`.txt`) 檔案

2. 對於現有的 `docs/index.md`：

   - 解析目前項目
   - 注意現有的檔案參考和描述
   - 找出任何損壞的連結或遺失的檔案
   - 追蹤已編製索引的內容

3. 對於找到的每個文件檔案：

   - 擷取標題 (從第一個標題或檔名)
   - 透過分析內容產生簡短描述
   - 建立指向該檔案的相對 markdown 連結
   - 檢查它是否已在索引中
   - 如果遺失或過期，準備更新

4. 對於在索引中找到的任何遺失或不存在的檔案：

   - 呈現所有參考不存在檔案的項目清單
   - 對於每個項目：
     - 顯示完整的項目詳細資料 (標題、路徑、描述)
     - 在移除前要求明確確認
     - 如果檔案已移動，提供更新路徑的選項
     - 記錄決定 (移除/更新/保留) 以供最終報告

5. 更新 `docs/index.md`：
   - 維護現有結構和組織
   - 新增遺失的項目並附上描述
   - 更新過期的項目
   - 僅移除已確認移除的項目
   - 確保整體格式一致

### 索引項目格式

`docs/index.md` 中的每個項目應遵循此格式：

```markdown
### [文件標題](relative/path/to/file.md)

文件的目的和內容簡述。
```

### 操作規則

1. 絕不修改已編製索引檔案的內容
2. 當 index.md 中的現有描述足夠時，保留它們
3. 維護索引中任何現有的分類或分組
4. 所有連結都使用相對路徑
5. 確保描述簡潔但資訊豐富
6. 未經明確確認，絕不移除項目
7. 報告發現的任何損壞連結或不一致之處
8. 在考慮移除之前，允許更新已移動檔案的路徑

### 流程產出

此任務將提供：

1. index.md 的變更摘要
2. 新編製索引的檔案清單
3. 已更新的項目清單
4. 提出移除的項目清單及其狀態：
   - 已確認移除
   - 已更新路徑
   - 儘管檔案遺失仍保留
5. 發現的任何其他問題或不一致之處

### 處理遺失檔案

對於索引中參考但檔案系統中找不到的每個檔案：

1. 呈現項目：

   ```markdown
   偵測到遺失檔案：
   標題：[文件標題]
   路徑：relative/path/to/file.md
   描述：現有描述

   選項：

   1. 移除此項目
   2. 更新檔案路徑
   3. 保留項目 (標記為暫時無法使用)

   請選擇一個選項 (1/2/3)：
   ```

2. 在採取任何行動前等待使用者確認
3. 記錄決定以供最終報告

## 必要輸入

請提供：

1. `docs/` 目錄的位置
2. 確認對 `docs/index.md` 的寫入權限
3. 任何特定的分類偏好
4. 任何要從索引中排除的檔案或目錄

您想繼續進行程式庫索引嗎？請提供上述必要輸入。

==================== END: library-indexing-task ====================

