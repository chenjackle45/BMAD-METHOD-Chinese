# {Project Name} 產品需求文件（PRD）

## 目標、宗旨與背景

最終輸出時請保持簡潔明確——這部分內容主要來自用戶或提供的簡報，如有需要請主動詢問以釐清細節。

## 功能性需求（MVP）

此時你應該已有明確想法，但請再次確認、提出建議性問題並加以說明，以確保內容正確。

## 非功能性需求（MVP）

## 使用者互動與設計目標

{
若產品包含使用者介面（UI），本節將記錄產品經理對使用者體驗（UX）的高層次願景與目標。這些資訊將成為設計架構師後續工作的關鍵起點與簡報。

請考慮並引導用戶提供以下資訊：
- **整體願景與體驗：** 希望呈現何種視覺風格與感受（例如：「現代且極簡」、「親切且易於接近」、「資料密集且專業」）？期望用戶獲得什麼樣的體驗？
- **關鍵互動模式：** 用戶與核心功能互動時是否有特定方式（例如：「X 的拖曳介面」、「Y 的精靈式設定流程」、「Z 的即時儀表板」）？
- **核心畫面／檢視（概念性）：** 從產品角度出發，為實現 MVP 價值，哪些畫面或檢視最為關鍵？（例如：「登入畫面」、「主儀表板」、「項目詳情頁」、「設定頁」）。
- **無障礙目標：** 是否有已知的高層次無障礙需求（例如：「必須支援螢幕閱讀器使用者」）。
- **品牌考量（高層次）：** 是否有已知的品牌元素或風格指南必須納入？
- **目標裝置／平台：**（例如：「以網頁桌面端為主」、「行動優先響應式網頁應用」）。

本節並非詳細 UI 規格，而是以產品為核心的簡報，作為設計架構師後續撰寫完整 UI/UX 規格文件的依據。
}

## 技術假設

本節主要彙整供架構師產出技術細節時參考的資訊。可包含現有已知或從用戶處獲得的高層次技術資訊。請主動詢問用戶，以取得語言、框架、starter template、函式庫、外部 API、潛在函式庫選擇等基本概念。

- **Repository & Service Architecture：** {CRITICAL DECISION: 記錄所選的 repository 結構（如 Monorepo、Polyrepo）及高層次服務架構（如 Monolith、Microservices、Monorepo 內的 Serverless functions）。請根據專案目標、MVP 範圍、團隊結構與可擴展性需求說明決策理由。此決策將直接影響技術路線，並提供 Architect Agent 參考。}

### 測試需求

除了單元測試外，如何驗證功能？是否需要手動腳本或測試、e2e、整合測試等……請與用戶確認後填寫本節。

## Epic 概覽

- **Epic {#}: {Title}**
    - 目標：{以 1-2 句簡明描述此 Epic 的主要目標與價值。}
    - Story {#}: 作為一個 {type of user/system}，我想要 {執行某動作／達成某目標}，以便 {實現某效益／達成某原因}。
        - {驗收標準列表}
    - Story {#}: 作為一個 {type of user/system}，我想要 {執行某動作／達成某目標}，以便 {實現某效益／達成某原因}。
        - {驗收標準列表}
- **Epic {#}: {Title}**
    - 目標：{以 1-2 句簡明描述此 Epic 的主要目標與價值。}
    - Story {#}: 作為一個 {type of user/system}，我想要 {執行某動作／達成某目標}，以便 {實現某效益／達成某原因}。
        - {驗收標準列表}
    - Story {#}: 作為一個 {type of user/system}，我想要 {執行某動作／達成某目標}，以便 {實現某效益／達成某原因}。
        - {驗收標準列表}

## 主要參考文件

{ 本節將於前述各節內容拆分為多份文件後再行建立 }

## MVP 以外不納入範圍的想法

任何你與用戶已同意不納入範圍，或可移出範圍以保持 MVP 精簡的內容。請考量 PRD 目標，將可延後至 MVP 完成並交付後再評估功能性、市場適配或使用情形的額外加值或附加功能列於此。

## 【選填：僅限簡化 PM-to-Development 流程】核心技術決策與應用架構

{本節僅於 PM 採用「簡化 PM-to-Development 流程」時填寫。內容涵蓋通常由架構師定義的關鍵技術基礎，讓開發流程更直接。請於初步 PRD（目標、用戶等）草擬後、詳細 Epic/Story 定義前或同步收集並隨時更新。}

### 技術堆疊選擇
{協同明確定義核心技術。請具體說明選擇與版本。}
-   **主要後端語言／框架：** {例如 Python/FastAPI、Node.js/Express、Java/Spring Boot}
-   **主要前端語言／框架（如適用）：** {例如 TypeScript/React（Next.js）、JavaScript/Vue.js}
-   **資料庫：** {例如 PostgreSQL、MongoDB、AWS DynamoDB}
-   **關鍵函式庫／服務（後端）：** {例如 認證（JWT、OAuth provider）、ORM（SQLAlchemy）、快取（Redis）}
-   **關鍵函式庫／服務（前端，如適用）：** {例如 UI 元件庫（Material-UI、Tailwind CSS + Headless UI）、狀態管理（Redux、Zustand）}
-   **部署平台／環境：** {例如 Docker on AWS ECS、Vercel、Netlify、Kubernetes}
-   **版本控制系統：** {例如 Git with GitHub/GitLab}

### 建議應用架構
{描述程式碼庫的高層次組織。可包含簡單的文字型目錄結構、主要模組／元件清單，以及其互動方式簡述。目標是為開發者提供明確的起點。}

範例：
```
/
├── app/                  # 主應用程式原始碼
│   ├── api/              # 後端 API 路由與邏輯
│   │   ├── v1/
│   │   └── models.py
│   ├── web/              # 前端元件與頁面（如為單體架構）
│   │   ├── components/
│   │   └── pages/
│   ├── core/             # 共用商業邏輯、工具
│   └── main.py           # 應用程式進入點
├── tests/                # 單元與整合測試
├── scripts/              # 工具腳本
├── Dockerfile
├── requirements.txt
└── README.md
```
-   **Monorepo/Polyrepo：** {請說明預期採用 monorepo 或 polyrepo 結構，並簡述原因。}
-   **主要模組／元件與職責：**
    -   {模組 1 名稱}：{簡要說明其用途與主要職責}
    -   {模組 2 名稱}：{簡要說明其用途與主要職責}
    -   ...
-   **資料流概述（概念性）：** {簡述主要元件間資料流動方式，例如 Frontend -> API -> Core Logic -> Database。}

## 變更紀錄

| 變更內容    | 日期       | 版本    | 說明                        | 作者           |
| ----------- | ---------- | ------- | --------------------------- | -------------- |

----- END PRD START CHECKLIST OUTPUT ------

## 清單結果報告

----- END Checklist START Design Architect `UI/UX Specification Mode` Prompt ------



----- END Design Architect `UI/UX Specification Mode` Prompt START Architect Prompt ------

## 初始架構師提示

根據我們針對 {Product Name} 的討論與需求分析，彙整以下技術指引，供你進行架構分析與啟動架構創建模式時參考：

### 技術基礎設施

- **Repository & Service Architecture Decision：** {重申「技術假設」中所做決策，例如 Monorepo 內含 Next.js 前端與 Python FastAPI 後端服務；或 Polyrepo 分別管理 Frontend（Next.js）與 Backend（Spring Boot Microservices）倉庫。}
- **Starter Project/Template：** {需使用的 starter project、template 或現有程式碼庫資訊}
- **Hosting/Cloud Provider：** {指定雲端平台（AWS、Azure、GCP 等）或託管需求}
- **Frontend Platform：** {前端框架／函式庫偏好或需求（React、Angular、Vue 等）}
- **Backend Platform：** {後端框架／語言偏好或需求（Node.js、Python/Django 等）}
- **Database Requirements：** {關聯式、NoSQL、偏好產品或服務}

### 技術限制

- {列出影響架構決策的技術限制}
- {包含任何強制性技術、服務或平台}
- {註明有特定技術影響的整合需求}

### 部署考量

- {部署頻率預期}
- {CI/CD 需求}
- {環境需求（local、dev、staging、production）}

### 本地開發與測試需求

{僅當用戶明確表示重視本地開發與測試能力時納入本節。若用戶偏好不適用，可移除此節。}

- {本地開發環境需求}
- {命令列測試能力預期}
- {跨環境測試需求}
- {應提供的工具腳本或工具}
- {元件可測試性之特定需求}

### 其他技術考量

- {具技術影響的安全性需求}
- {具架構影響的可擴展性需求}
- {架構師應考慮的其他技術背景}

----- END Architect Prompt -----