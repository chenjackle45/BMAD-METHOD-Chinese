# {Project Name} 前端架構文件

## 目錄

{ 若有新增或移除章節，請於此處更新 }

- [簡介](#introduction)
- [整體前端理念與模式](#overall-frontend-philosophy--patterns)
- [前端目錄結構詳解](#detailed-frontend-directory-structure)
- [元件拆解與實作細節](#component-breakdown--implementation-details)
  - [元件命名與組織](#component-naming--organization)
  - [元件規格模板](#template-for-component-specification)
- [狀態管理深入探討](#state-management-in-depth)
  - [Store 結構 / Slices](#store-structure--slices)
  - [主要 Selector](#key-selectors)
  - [主要 Action / Reducer / Thunk](#key-actions--reducers--thunks)
- [API 互動層](#api-interaction-layer)
  - [Client/Service 結構](#clientservice-structure)
  - [錯誤處理與重試（前端）](#error-handling--retries-frontend)
- [路由策略](#routing-strategy)
  - [路由定義](#route-definitions)
  - [路由守衛 / 保護](#route-guards--protection)
- [建置、打包與部署](#build-bundling-and-deployment)
  - [建置流程與腳本](#build-process--scripts)
  - [主要打包優化](#key-bundling-optimizations)
  - [部署至 CDN/Hosting](#deployment-to-cdnhosting)
- [前端測試策略](#frontend-testing-strategy)
  - [元件測試](#component-testing)
  - [UI 整合/流程測試](#ui-integrationflow-testing)
  - [端對端 UI 測試工具與範圍](#end-to-end-ui-testing-tools--scope)
- [無障礙（AX）實作細節](#accessibility-ax-implementation-details)
- [效能考量](#performance-considerations)
- [變更紀錄](#change-log)

## Introduction

{ 本文件詳細說明 {Project Name} 前端的技術架構。此文件為主架構文件及 UI/UX 規格的補充，旨在為前端開發提供明確藍圖，確保一致性、可維護性，並與整體系統設計及用戶體驗目標保持一致。 }

- **主架構文件連結：** {例如：`docs/architecture.md`}（註：整體系統架構，包括 Monorepo/Polyrepo 決策與後端結構，將影響前端選擇，特別是共用程式碼或 API 互動模式。）
- **UI/UX 規格連結：** {例如：`docs/front-end-spec.md`}
- **主要設計檔案連結（Figma、Sketch 等）：** {來自 UI/UX 規格}
- **已部署 Storybook / 元件展示（如適用）：** {URL}

## Overall Frontend Philosophy & Patterns

{ 說明前端所採用的核心架構決策與模式。應與主架構文件中的「技術棧最終選擇」保持一致，並考量整體系統架構的影響（如 monorepo vs. polyrepo、後端服務結構）。 }

- **框架與核心函式庫：** {例如：React 18.x with Next.js 13.x、Angular 16.x、Vue 3.x with Nuxt.js。如主架構文件未詳述，請簡要說明選擇原因。}
- **元件架構：** {例如：Atomic Design 原則、Presentational vs. Container 元件、特定元件庫如 Material UI、Tailwind CSS 作為樣式方案。}
- **狀態管理策略：** {例如：Redux Toolkit、Zustand、Vuex、NgRx。簡述整體做法－全域 store、功能 store、context API 使用等。詳細內容見「狀態管理深入探討」。}
- **資料流：** {例如：單向資料流、資料如何取得、傳遞至元件及更新。}
- **樣式處理方式：** {例如：CSS Modules、Styled Components、SCSS with BEM、Tailwind CSS。如有設定檔請附連結。}
- **主要設計模式：** {例如：Provider pattern、Hooks、高階元件、API 呼叫服務模式。}

## Detailed Frontend Directory Structure

{ 請提供前端應用程式專屬資料夾結構的 ASCII 圖（如 `src/` 或 `app/` 內）。此圖需補充主架構文件中所述的專案結構，並強調元件、頁面/視圖、服務、狀態、樣式、資產等的組織慣例。 }

### EXAMPLE - 僅供參考（以 React/Next.js 應用為例）

```plaintext
src/
├── app/                        # Next.js App Router: Pages/Layouts/Routes
│   ├── (features)/             # 以功能為單位的路由群組
│   │   └── dashboard/
│   │       ├── layout.tsx
│   │       └── page.tsx
│   ├── api/                    # API 路由（如使用 Next.js 後端功能）
│   ├── globals.css
│   └── layout.tsx              # 根佈局
├── components/                 # 共用/可重用 UI 元件
│   ├── ui/                     # 基礎 UI 元素（Button、Input、Card－多來自元件庫）
│   │   ├── Button.tsx
│   │   └── ...
│   ├── layout/                 # 佈局元件（Header、Footer、Sidebar）
│   │   ├── Header.tsx
│   │   └── ...
│   └── (feature-specific)/     # 特定功能專屬但可於該功能重用的元件
│       └── user-profile/
│           └── ProfileCard.tsx
├── features/                   # 功能專屬邏輯、hooks、非全域狀態、服務
│   └── auth/
│       ├── components/         # 僅供 auth 功能使用的元件
│       ├── hooks/              # 功能專屬 hooks
│       ├── services/           # 功能專屬 API 互動
│       └── store.ts            # 功能專屬 state slice（如適用）
├── hooks/                      # 全域/可共用自訂 hooks
│   └── useAuth.ts
├── lib/                        # 工具函式、輔助程式、常數
│   └── utils.ts
├── services/                   # 全域 API 服務 client 或 SDK 設定
│   └── apiClient.ts
├── store/                      # 全域狀態管理（如 Redux store 設定）
│   ├── index.ts
│   ├── rootReducer.ts
│   └── (slices)/
├── styles/                     # 全域樣式、主題設定（如未用 `globals.css`）
└── types/                      # 全域 TypeScript 型別定義
    └── index.ts
```

### 前端結構說明：

{ 說明本結構的具體慣例或設計理由。例如：「若元件僅於單一功能使用，則與該功能共置。」 }

## Component Breakdown & Implementation Details

{ 本節說明 UI 元件的定義慣例與模板。部分全域共用或基礎元件（如非來自元件庫的核心 UI 元素、主要佈局結構）可於此先行規範以確保一致性，大多數功能專屬元件的詳細規格將隨 story 實作逐步產生。開發團隊（或 AI agent）於辨識新元件需求時，應依下方「元件規格模板」填寫。 }

### 元件命名與組織

{ 簡述元件命名慣例（如 PascalCase、`feature-ComponentName.tsx`）。元件於檔案系統如何組織（如需可重申目錄結構），是否依功能、型態（UI、layout）等分組？ }

### 元件規格模板

{ 針對 UI/UX 規格與設計檔（Figma）中每個重要元件，請提供下列資訊。每個元件重複本小節。細節應足以讓 AI agent 或開發者據此實作，避免歧義。 }

#### 元件：`{ComponentName}`（如 `UserProfileCard`、`ProductDetailsView`）

- **用途：** {簡述此元件的功能及其在 UI 中的角色。}
- **原始檔案：** {例如：`src/components/user-profile/UserProfileCard.tsx`}
- **視覺參考：** {連結至特定 Figma 畫面/元件或 Storybook 頁面。}
- **Props（屬性）：**
  { 列出元件可接受的所有 prop。 }
  | Prop Name | Type | 必填？ | 預設值 | 說明 |
  | :-------------- | :--------------------------- | :-------- | :------------ | :---------------------------------------------- |
  | `userId` | `string` | Yes | N/A | 要顯示的使用者 ID。 |
  | `avatarUrl` | `string` | No | `null` | 使用者頭像圖片的 URL。 |
  | `onEdit` | `() => void` | No | N/A | 觸發編輯動作時的回呼函式。 |
  | `variant` | `'compact' | 'full'` | No | `'full'` | 控制卡片顯示模式。 |
  | `{anotherProp}` | `{type (如 number, boolean, customType)}` | {Yes/No} | {如有} | {說明} |
- **內部狀態（如有）：**
  { 說明元件管理的主要內部狀態。簡單 UI 狀態（如 `isDropdownOpen`）若不複雜可不列。 }
  | State Variable | Type | 初始值 | 說明 |
  | :-------------- | :--------- | :------------ | :-------------------------------------------- |
  | `isLoading` | `boolean` | `false` | 標記元件資料是否載入中。 |
  | `{anotherState}`| `{type}` | `{value}` | {說明} |
- **主要 UI 元素／結構：**
  { 描述元件主要視覺組成與大致排版。可用簡要文字或簡單 pseudo-HTML。 }
  ```html
  <div> <!-- 主卡片容器 -->
    <img> <!-- 頭像 -->
    <h2> <!-- 使用者名稱 -->
    <p>  <!-- 使用者 Email -->
    <button> <!-- 編輯按鈕（如適用） -->
  </div>
  ```
- **事件處理／發出：**
  - **處理：** {如：編輯按鈕的 `onClick`。}
  - **發出：** {如元件會發出自訂事件，請描述。例如：`onFollow: (userId: string) => void`}
- **觸發動作（副作用）：**
  - **狀態管理：** {如：「元件掛載時 dispatch `fetchUserDetails(userId)` action。」、「呼叫 `userSlice.actions.setUserName(newName)`。」}
  - **API 呼叫：** {說明會呼叫「API 互動層」的哪些服務/函式。例如：「呼叫 `userService.fetchUser(userId)`。」傳遞哪些資料？如何處理回應（成功/失敗）？如何更新內部或全域狀態？}
- **樣式說明：**
  - {引用設計系統元件（如：「使用 UI library 的 `<Button variant='primary'>`」）。}
  - {如直接用 CSS/SCSS/Tailwind，請列出主要 class。}
  - {如有特殊響應式需求，請說明。}
- **無障礙說明：**
  - {需加註的 ARIA 屬性（如 `aria-label`、`role`）。}
  - {此元件的鍵盤操作考量。}

---

_請針對每個重要元件重複上述模板。_

---

## 狀態管理深入探討

{ 本節補充主架構文件及「整體前端理念」中所述的狀態管理策略，並定義 state module 的結構與實作慣例。整體做法與核心 store 設定（如有）於此說明，具體功能的 state slice、selector、action/thunk 會隨功能開發時依本慣例產生。 }

- **選用方案：** {例如：Redux Toolkit、Zustand、Vuex、NgRx－可重申主架構文件內容。}
- **選擇理由（如主架構文件未詳述）：** {為何本專案選擇此方案而非其他？}

### Store 結構 / Slices

{ 說明全域狀態的組織慣例（如：「每個需全域狀態的主要功能，於 `src/features/[featureName]/store.ts` 建立專屬 Redux slice。」）。部分核心、全域 slice（如 session 管理、主題）可先行定義作為範例或基礎。 }

- **核心 Slice 範例（如 `sessionSlice`）：**
  - **用途：** {管理使用者 session、認證狀態及全域可存取的基本個人資料。}
  - **狀態結構：**
    ```typescript
    interface SessionState {
      currentUser: {
        id: string;
        name: string;
        email: string;
        roles: string[];
      } | null;
      isAuthenticated: boolean;
      token: string | null;
      status: "idle" | "loading" | "succeeded" | "failed";
      error: string | null;
    }
    ```
  - **主要 Reducer/Action：** {簡列主要 action，如 `setSession`、`clearSession`、`authLoading`、`authSuccess`、`authFailure`。}
- **功能 Slice 模板（如 `{featureName}Slice`）：**
  - **用途：** {當新功能需專屬 state slice 時補充。}
  - **狀態結構：** {由該功能定義。}
  - **主要 Reducer/Action：** {由該功能定義。}

### 主要 Selector

{ 列出任何核心、預先定義 slice 的重要 selector。功能 slice 的 selector 於該 slice 定義。請說明 selector 的建立慣例（如：建議用 `createSelector` 以利記憶化）。 }

- **`selectCurrentUser`：** {回傳 `sessionSlice` 的 `currentUser` 物件。}
- **`selectIsAuthenticated`：** {回傳 `sessionSlice` 的 `isAuthenticated` 布林值。}
- **`selectAuthToken`：** {回傳 `sessionSlice` 的 `token`。}

### 主要 Action / Reducer / Thunk

{ 詳述核心、預先定義 slice 的複雜 action，特別是非同步 thunk 或 saga。功能 slice 的 action/thunk 於該 slice 定義，並遵循本慣例。 }

- **核心 Action/Thunk 範例：`authenticateUser(credentials: AuthCredentials)`**
  - **用途：** {處理使用者登入，呼叫認證 API 並更新 `sessionSlice`。}
  - **Dispatch 流程：**
    1. dispatch `sessionSlice.actions.setStatus('loading')`
    2. 呼叫 `authService.login(credentials)`（來自 API 互動層）
    3. 成功時：dispatch `sessionSlice.actions.setSession(response.data)`（含 user 與 token）及 `sessionSlice.actions.setStatus('succeeded')`
    4. 失敗時：dispatch `sessionSlice.actions.setError(error.message)` 及 `sessionSlice.actions.setStatus('failed')`
- **功能 Action/Thunk 模板：`{featureActionName}`**
  - **用途：** {針對功能專屬非同步操作補充。}
  - **Dispatch 流程：** {由該功能定義，並遵循上述模式。}

## API 互動層

{ 說明前端如何與主架構文件中定義的後端 API 溝通。重點在於建立基礎 client 設定與服務抽象模式。具體服務函式多隨功能開發逐步產生。 }

### Client/Service 結構

- **HTTP Client 設定：** {例如：Axios instance、Fetch 包裝。Base URL 設定、預設標頭（如從 state 取得 Authorization）、請求/回應攔截器（如錯誤標準化、token 更新）。}
- **服務定義（範例）：**
  - **`userService.ts`：**
    - **用途：** {處理所有與使用者相關的 API 互動。}
    - **函式：**
      - `fetchUser(userId: string): Promise<User>`
      - `updateUserProfile(userId: string, data: UserProfileUpdateDto): Promise<User>`
  - **`productService.ts`：**
    - **用途：** {...}
    - **函式：** {...}

### 錯誤處理與重試（前端）

- **全域錯誤處理：** {API 錯誤如何被全域攔截並呈現給使用者（如 toast 通知）？是否有全域錯誤狀態？}
- **特定錯誤處理：** {元件如何針對特定 API 錯誤給予更具情境的回饋？}
- **重試邏輯：** {是否有針對冪等請求的前端重試機制？如有，如何設定？}

## 路由策略

{ 詳述前端應用的導覽與路由處理方式。 }

- **路由函式庫：** {例如：React Router、Next.js App Router、Vue Router、Angular Router。}

### 路由定義

{ 列出應用的主要路由及各路由對應的主要元件。 }

| Path Pattern           | Component/Page                | Protection    | Notes                               |
| :--------------------- | :---------------------------- | :------------ | :---------------------------------- |
| `/`                    | `HomePage.tsx`                | Public        |                                     |
| `/login`               | `LoginPage.tsx`               | Public        | 已登入時自動導向。                 |
| `/dashboard`           | `DashboardPage.tsx`           | Authenticated |                                     |
| `/products`            | `ProductListPage.tsx`         | Public        |                                     |
| `/products/:productId` | `ProductDetailsPage.tsx`      | Public        |                                     |
| `/settings/profile`    | `UserProfileSettingsPage.tsx` | Authenticated |                                     |
| `{anotherRoute}`       | `{Component}`                 | {Type}        | {Notes}                             |

### 路由守衛 / 保護

- **認證守衛：** {說明如何根據認證狀態保護路由。例如：高階元件、特定 router hook。}
- **授權守衛（如適用）：** {說明如何根據使用者角色或權限保護路由。}

## 建置、打包與部署

{ 補充主架構文件「基礎設施與部署概述」中有關前端建置與部署的細節。 }

### 建置流程與腳本

- **主要建置腳本：** {例如：`npm run build`、`yarn build`。說明其作用，並指向 `package.json` 腳本。}
- **建置時環境變數處理：** {如 `process.env` 變數（如 `NEXT_PUBLIC_API_URL`）於不同環境（dev、staging、prod）如何管理？}

### 主要打包優化

- **程式碼分割：** {如何實作？如依路由、依元件動態載入。}
- **Tree Shaking：** {是否由建置工具自動處理？}
- **Lazy Loading：** {元件、圖片或路由的延遲載入策略。}
- **壓縮與最小化：** {是否由建置工具（如 Webpack、Vite、Next.js build）自動處理？}

### 部署至 CDN/Hosting

- **目標平台：** {例如：Vercel、Netlify、AWS S3/CloudFront、Azure Static Web Apps。}
- **部署觸發條件：** {例如：Git push 至 main branch 透過 GitHub Actions（參考主 CI/CD）。}
- **資產快取策略：** {靜態資產於 CDN/瀏覽器如何快取？}

## 前端測試策略

{ 本節補充主架構文件「測試策略」中有關前端的細節。 }

- **主測試策略連結：** {請參考主文件 `docs/testing-strategy.md` 或架構文件相關章節。}

### 元件測試

- **範圍：** {針對單一 UI 元件的測試（類似元件單元測試）。}
- **工具：** {例如：React Testing Library、Jest、Vitest、Vue Test Utils、Angular Testing Utilities。}
- **重點：** {渲染、props 處理、基本互動、事件發出、視覺快照測試（如有）。}
- **位置：** {例如：元件旁的 `*.test.tsx` 或 `*.spec.tsx`。}

### UI 整合/流程測試

- **範圍：** {測試多個元件如何協作完成單一頁面或功能內的小型用戶流程，可模擬 API 呼叫或狀態管理。}
- **工具：** {同元件測試，但設定更複雜。}
- **重點：** {元件間資料流、互動後條件渲染、功能內導覽。}

### 端對端 UI 測試工具與範圍

- **工具：** {重申主測試策略，如 Playwright、Cypress、Selenium。}
- **範圍（前端重點）：** {定義 E2E UI 測試涵蓋的主要用戶旅程。例如：用戶註冊、加入購物車、完成結帳。}
- **UI 測試資料管理：** {如何確保 UI E2E 測試資料一致性？}

## 無障礙（AX）實作細節

{ 根據 UI/UX 規格中的 AX 要求，說明技術實作方式。 }

- **語意化 HTML：** {強調正確使用 HTML5 元素。}
- **ARIA 實作：** {自訂/複雜元件需加註的 ARIA role、state、property。}
- **鍵盤操作：** {確保所有互動元素可聚焦並可用鍵盤操作。}
- **焦點管理：** {於 modal、動態內容變更時如何管理焦點。}
- **AX 測試工具：** {例如：Axe DevTools、Lighthouse、人工測試流程。}

## 效能考量

{ 強調前端專屬的效能最佳化策略。 }

- **圖片最佳化：** {格式（如 WebP）、響應式圖片（`<picture>`、`srcset`）、延遲載入。}
- **程式碼分割與 Lazy Loading（如需可重申建置章節）：** {其對體感效能的影響。}
- **最小化重繪：** {如 `React.memo`、`shouldComponentUpdate`、最佳化 selector 等技巧。}
- **Debounce/Throttle：** {如搜尋輸入、視窗縮放等事件處理。}
- **虛擬化：** {長列表或大量資料（如 React Virtualized、TanStack Virtual）。}
- **快取策略（前端）：** {瀏覽器快取、PWA service worker（如適用）。}
- **效能監控工具：** {例如：Lighthouse、WebPageTest、瀏覽器 DevTools 效能分析。}

## 變更紀錄

| Change | Date | Version | Description | Author |
| ------ | ---- | ------- | ----------- | ------ |