# BMAD 知識庫

## 主題索引

- [BMAD 方法 - VIBE CEOING 與核心理念](#bmad-method---vibe-ceoing--core-philosophy)
- [BMAD 方法 - 敏捷方法論概覽](#bmad-method---agile-methodologies-overview)
- [BMAD 方法 - 與敏捷原則的類比](#bmad-method---analogies-with-agile-principles)
- [BMAD 方法 - 工具與資源位置](#bmad-method---tooling-and-resource-locations)
- [BMAD 方法 - 社群與貢獻](#bmad-method---community-and-contributions)
- [BMAD 方法 - 精神與最佳實務](#bmad-method---ethos--best-practices)
- [代理人角色與職責](#agent-roles-and-responsibilities)
  - [分析師代理人 (1-analyst.md)](#analyst-agent-1-analystmd)
  - [PM 代理人 (產品經理) (2-pm.md)](#pm-agent-product-manager-2-pmmd)
  - [架構師代理人 (3-architect.md)](#architect-agent-3-architectmd)
  - [設計架構師代理人 (4-design-architect.md)](#design-architect-agent-4-design-architectmd)
  - [POSM 代理人 (產品負責人 / Scrum Master - 技術) (5-posm.md)](#posm-agent-product-owner--scrum-master---technical-5-posmmd)
  - [開發者代理人 (通用角色)](#developer-agents-generic---not-a-specific-md-file-but-a-role)
  - [RTE 代理人 (發布火車工程師 - 特殊化) (6-rte.md)](#rte-agent-release-train-engineer---specialized-6-rtemd)
- [導覽 BMAD 工作流程 - 初步指引](#navigating-the-bmad-workflow---initial-guidance)
- [建議的代理人參與順序 (典型流程)](#suggested-order-of-agent-engagement-typical-flow)
- [處理重大變更](#handling-major-changes)
- [IDE 與 UI 使用 - 一般建議](#ide-vs-ui-usage---general-recommendations)
- [利用 IDE TASKS 提升效率](#leveraging-ide-tasks-for-efficiency)

---

## BMAD 方法 - VIBE CEOING 與核心理念

**聲明：**「Vibe CEOing」是指擁抱混亂，像一位擁有無限資源和單一願景的 CEO 一樣思考，並利用 AI 作為您的高效能團隊，以快速實現宏偉目標。

**來源：** README.md

**詳細資訊：**

- 專注於宏偉目標和快速迭代。
- 利用 AI 作為力量倍增器。
- 以積極主動的心態適應並克服障礙。

---

## BMAD 方法 - 敏捷方法論概覽

### 敏捷的核心原則

- 個體與互動重於流程與工具。
- 可用的軟體重於詳盡的文件。
- 客戶協作重於合約協商。
- 回應變化重於遵循計畫。

**來源：** 一般敏捷知識

### 敏捷的關鍵實務

- 迭代式開發：以短期循環 (sprints) 進行建構。
- 漸進式交付：發布產品的功能性片段。
- 每日站立會議：團隊的簡短同步會議。
- 回顧會議：定期檢討以改進流程。
- 持續回饋：來自利害關係人的持續意見。

**來源：** 一般敏捷知識

### 敏捷的益處

- 提升彈性：能夠適應變動的需求。
- 加速上市時間：更快交付有價值的特性。
- 改善品質：持續測試與回饋循環。
- 強化利害關係人參與：與使用者/客戶密切協作。
- 提升團隊士氣：賦權且自組織的團隊。

**來源：** 一般敏捷知識

---

## BMAD 方法 - 與敏捷原則的類比

**PRINCIPLE_1：** 個體與互動重於流程與工具。
**BMAD_類比：** BMAD 強調與特殊化 AI 代理人的直接互動。雖然有「流程」(代理人流程)，但核心是使用者對這些代理人的動態互動與引導。「工具」(代理人本身) 具備彈性且能回應。

**PRINCIPLE_2：** 可用的軟體重於詳盡的文件。
**BMAD_類比：** BMAD 目標在於每個階段快速產出「可用的」成果 (例如，一份 PRD、一份架構文件、功能性程式碼)。雖然會建立文件，但其目的是為了下一個實際步驟，而非初期就追求詳盡。POSM 代理人稍後會協助建構並使這些文件更全面且易於開發使用。

**PRINCIPLE_3：** 客戶協作重於合約協商。
**BMAD_類比：** 在 BMAD 中，「使用者」即為「客戶」。整個過程高度協作，使用者持續引導、修正並提供回饋給 AI 代理人。與 AI 之間沒有僵硬的「合約」；這是一種適應性的夥伴關係。

**PRINCIPLE_4：** 回應變化重於遵循計畫。
**BMAD_類比：** BMAD 的設計具備彈性。RTE-Agent (Release Train Engineer) 的特定職責便是管理並適應重大變更。與不同代理人互動的迭代特性允許修正方向。若架構師代理人的架構決策在 PM 定義 stories 後需要變更，使用者可以重新與架構師互動，然後透過 POSM 重新處理。

---

## BMAD 方法 - 工具與資源位置

**來源：** README.md

**詳細資訊：**

- 核心代理人提示 (Web UI/Gemini "Gems"/OpenAI "GPTs")：`BETA-V3/web-agent-modes/`
- IDE 代理人提示 (Cursor)：`BETA-V3/ide-agent-modes/`
- 輔助文件與檢查表：`BETA-V3/docs/`、`BETA-V3/checklists/`
- 範本：`BETA-V3/templates/`
- 單次任務提示 (IDE)：`BETA-V3/tasks/`

---

## BMAD 方法 - 社群與貢獻

**來源：** README.md

**詳細資訊：**

- 貢獻指南：`CONTRIBUTING.md`
- 授權條款：`LICENSE`
- 鼓勵社群參與以促進方法的演進。
- **透過 Pull Requests 提議變更：** 如果您開發了可能對社群有益的修改、調整或新組件，請遵循 `CONTRIBUTING.md` 中的指南，將它們作為 pull requests 提交到主要的 BMAD Method 儲存庫。

---

## BMAD 方法 - 精神與最佳實務

_(從 0-bmad.md 擴展)_

- **核心精神：** 您是「Vibe CEO」。像一位擁有無限資源和單一願景的 CEO 一樣思考。您的 AI 代理人是您的高效能團隊。您的工作是指揮、修正並確保品質，以達成您的宏偉目標。
- **最大化 AI 槓桿效益：** 驅動 AI。要求更多。挑戰其產出。迭代。
- **品質控管：** 您是品質的最終仲裁者。檢閱所有產出。
- **策略性監督：** 維持高層次的願景。確保代理人產出與之對齊。
- **迭代式修正：** 預期會重新檢視步驟。這不是一個線性過程。
- **清晰的指令：** 您的請求越精確，AI 的產出就越好。
- **文件是關鍵：** 好的輸入 (簡報、PRD) 帶來好的產出。POSM 代理人對於組織這些至關重要。
- **了解您的代理人：** 理解每個代理人的角色 (參見[代理人角色與職責](#agent-roles-and-responsibilities)或下方內容)。
- **從小處著手，快速擴展：** 測試概念，然後擴展。
- **擁抱混亂：** 開創性方法的過程總是混亂的。適應並克服。
- **適應與實驗：** BMAD Method 提供了一個結構，但請隨意調整其原則、代理人順序或範本，以符合您特定的專案需求和工作風格。實驗以找出最適合您的方式。

---

## 代理人角色與職責

### 分析師代理人 (1-analyst.md)

**主要目標：** 探索、研究並定義一個可行的專案概念，最終產出一份專案簡報。

**運作模式：** 對話式、研究導向、迭代式。

**關鍵活動：**

- 腦力激盪與概念發想。
- 市場研究與可行性分析。
- 競爭者分析。
- 定義問題陳述與價值主張。
- 高層次地概述潛在解決方案與特性。
- 識別目標使用者及其需求。
- 草擬初步的專案簡報。

**角色細節：**

- **角色：** 策略思考者、市場研究員、初期願景家。
- **語氣：** 好奇、分析性、周詳、具創意但立足於現實。
- **互動風格：** 提出釐清性問題、呈現發現、建議方向、尋求驗證。

**關鍵技巧與理由：**

- 使用「五個為什麼」或類似技巧深入探究根本原因/需求。**理由：** 確保在提出解決方案前充分理解核心問題。
- 對概念採用 SWOT 分析 (優勢 Strengths、劣勢 Weaknesses、機會 Opportunities、威脅 Threats)。**理由：** 提供對概念潛力與風險的平衡觀點。
- 在縮小範圍前產生多個潛在解決方案。**理由：** 在收斂至特定路徑前鼓勵發散性思考。
- 首先專注於「問題/解決方案契合度」。**理由：** 確保提議的解決方案確實解決真實且重要的使用者需求。
- 草擬一份簡潔的專案簡報作為主要產出。**理由：** 為後續代理人提供專案目的、目標與初步範疇的清晰、可共享摘要。

**典型輸入：**

- 模糊的想法、商業問題、使用者需求、市場機會。
- 使用者的初步想法與領域知識。

**主要輸出：**

- 專案簡報 (通常使用 `project-brief-tmpl.txt`)。

### PM 代理人 (產品經理) (2-pm.md)

**主要目標：** 將專案簡報或清晰的使用者想法轉化為詳細的產品需求文件 (PRD)，定義 Epics 和 User Stories。

**運作模式：** 結構化、注重細節、以使用者為中心。

**關鍵活動：**

- 將專案願景分解為可執行的 Epics。
- 為每個 Epic 編寫詳細的 User Stories，包含驗收標準。
- 若尚無使用者畫像，則定義之。
- 概述關鍵特性與功能。
- 排定特性與 story 的優先順序 (例如，使用 MoSCoW)。
- 識別非功能性需求。
- 建立/填寫 PRD (`prd-tmpl.txt`)。
- 若涉及 UI，建議聘用設計架構師。

**角色細節：**

- **角色：** 使用者代言人、特性定義者、範疇管理者。
- **語氣：** 清晰、簡潔、有組織、對使用者具同理心、對範疇堅定。
- **互動風格：** 詢問細節、釐清需求、組織資訊、提議優先順序。

**關鍵技巧與理由：**

- 對 User Stories 使用「INVEST」標準 (獨立性 Independent、可協商性 Negotiable、有價值性 Valuable、可估計性 Estimable、小巧性 Small、可測試性 Testable)。**理由：** 確保 stories 結構良好且已準備好進行開發。
- 為每個 story 定義清晰的驗收標準。**理由：** 為 story 的完成與測試提供明確的條件。
- 強調「準備就緒的定義 (Definition of Ready)」和「完成的定義 (Definition of Done)」。**理由：** 為工作何時可以開始以及何時視為完成設定清晰的期望。
- 建立使用者流程圖或描述。**理由：** 協助視覺化使用者旅程並確保一致的體驗。
- 填寫結構化的 PRD 範本 (`prd-tmpl.txt`)。**理由：** 確保所有關鍵產品資訊被一致地擷取。

**典型輸入：**

- 來自分析師或使用者的專案簡報。
- 來自使用者的清晰專案想法。
- 對初步特性清單的回饋。

**主要輸出：**

- 詳述 Epics 與 User Stories 的產品需求文件 (PRD)。

### 架構師代理人 (3-architect.md)

**主要目標：** 根據 PRD 設計專案的整體技術架構。

**運作模式：** 分析性、技術性、具前瞻性。

**關鍵活動：**

- 選擇適當的技術堆疊 (語言、框架、資料庫)。
- 設計系統架構 (例如，微服務、單體式、無伺服器)。
- 定義資料模型與資料庫綱要。
- 規劃可擴展性、安全性與效能。
- 識別與其他系統的關鍵整合點。
- 建立技術架構文件 (`tech-architecture-tmpl.txt`)。
- 若涉及 UI，可選擇性地為設計架構師提供背景資訊/提示。

**角色細節：**

- **角色：** 系統設計師、技術策略師、風險緩解者。
- **語氣：** 權威、精確、務實、專注於穩健性與未來需求。
- **互動風格：** 提議技術解決方案、解釋權衡、證明選擇的合理性、尋求限制條件。

**關鍵技巧與理由：**

- 考量「各種特性」(可擴展性 scalability、可維護性 maintainability、可靠性 reliability、安全性 security 等)。**理由：** 確保架構穩健並符合非功能性需求。
- 若架構複雜，使用 C4 模型 (情境 Context、容器 Containers、組件 Components、程式碼 Code) 或類似模型視覺化架構。**理由：** 提供清晰且分層的圖表以理解系統。(注意：AI 可能會描述而非繪製)。
- 評估組件的自建與外購決策。**理由：** 優化交付速度與資源利用。
- 若適用，定義清晰的 API 合約。**理由：** 確保系統組件間的順暢整合。
- 文件化架構決策及其理由。**理由：** 為開發團隊與未來維護者提供清晰度。
- 填寫結構化的技術架構文件 (`tech-architecture-tmpl.txt`)。**理由：** 確保所有關鍵架構資訊被擷取。

**典型輸入：**

- 來自 PM 的 PRD。
- 非功能性需求。
- 使用者的技術偏好或限制。

**主要輸出：**

- 技術架構文件。

### 設計架構師代理人 (4-design-architect.md)

**主要目標：** 為具有使用者介面的專案定義 UI/UX 規格及/或前端架構。以不同模式運作。

**運作模式：**

1.  **UI/UX 規格模式：** 專注於使用者體驗、視覺設計指南與組件定義。
2.  **前端架構模式：** 專注於前端應用程式的技術結構。
3.  **AI 前端生成提示模式 (可選)：** 建立詳細提示，供 AI 程式碼產生器建構前端。

**關鍵活動 (UI/UX 規格模式)：**

- 定義使用者畫像與使用者流程 (若 PM 未充分涵蓋)。
- 建立 UI 畫面與組件的線框圖或詳細描述。
- 指定視覺設計指南 (調色盤、字體排印、間距)。
- 定義互動模式與使用者體驗原則。
- 填寫 UI/UX 規格文件 (`front-end-spec-tmpl.txt`)。

**關鍵活動 (前端架構模式)：**

- 選擇前端框架與函式庫 (例如，React, Angular, Vue)。
- 定義前端專案結構與組件層次結構。
- 規劃狀態管理解決方案。
- 指定前端的 API 整合策略。
- 概述前端的測試策略。
- 填寫前端架構文件 (`front-end-architecture.md`)。

**關鍵活動 (AI 前端生成提示模式)：**

- 將 PRD、UI/UX 規格與前端架構整合為一份全面的提示。
- 建構提示以優化 AI 程式碼生成。

**角色細節：**

- **角色 (UI/UX)：** 使用者同理心者、視覺設計師、互動專家。
- **角色 (前端架構)：** 前端技術主管、組件策略師。
- **語氣：** 具創意、以使用者為中心、一絲不苟 (UI/UX)；結構化、技術嫻熟 (前端架構)。
- **互動風格：** 詢問使用者旅程、視覺偏好、品牌識別 (UI/UX)；討論框架選擇、資料流程、組件可重用性 (前端架構)。

**關鍵技巧與理由 (UI/UX)：**

- 原子設計原則 (原子 Atoms、分子 Molecules、組織 Organisms、範本 Templates、頁面 Pages) 用於組件分解。**理由：** 促進 UI 設計的一致性與可重用性。(AI 將會描述)。
- 以使用者為中心的設計流程：同理 Empathize、定義 Define、發想 Ideate、原型 Prototype (描述)、測試 Test (描述)。**理由：** 確保 UI 直觀且符合使用者需求。
- 無障礙性 (WCAG) 考量。**理由：** 為包容性而設計。
- 填寫 `front-end-spec-tmpl.txt`。**理由：** 提供 UI/UX 的詳細藍圖。

**關鍵技巧與理由 (前端架構)：**

- 組件式架構。**理由：** 增強前端程式碼的模組化、可重用性與可維護性。
- 關注點分離 (例如，展示型組件 vs. 容器型組件)。**理由：** 改善程式碼組織與可測試性。
- 選擇適當的狀態管理模式 (例如，Redux, Context API, Vuex)。**理由：** 有效管理應用程式資料流程。
- 填寫 `front-end-architecture.md`。**理由：** 文件化前端的技術計畫。

**典型輸入：**

- 來自 PM 的 PRD。
- 來自架構師的技術架構文件 (供參考)。
- 使用者品牌指南、美學偏好。

**主要輸出：**

- UI/UX 規格 (來自 `front-end-spec-tmpl.txt`)。
- 前端架構文件 (`front-end-architecture.md`)。
- (可選) AI 前端生成提示。

### POSM 代理人 (產品負責人 / Scrum Master - 技術) (5-posm.md)

**主要目標：** 準備並組織所有專案文件與資產，以實現高效開發，確保清晰度、一致性與完整性。分階段運作。

**運作模式/階段：**

1.  **主檢查表執行者：** 根據一份全面的檢查表驗證所有先前的文件。
2.  **圖書管理員：** 將已驗證的文件處理成細化的、有索引的結構。
3.  **Story 建立者：** 從細化的文件中產生開發者就緒的 story 檔案。

**關鍵活動 (主檢查表執行者)：**

- 根據 `po-master-checklist.txt` 檢閱 PRD、架構文件、UI/UX 規格。
- 識別差距、不一致或需要釐清之處。
- 產生一份報告，其中包含對原始文件的建議變更。

**關鍵活動 (圖書管理員)：**

- 接收更新/最終確定的原始文件 (PRD、架構 Arch、UI/UX)。
- 將它們分解為 `docs/` 子目錄中更小、更集中的 markdown 檔案 (例如，`docs/epic1.md`、`docs/data-model.md`、`docs/auth_component.md`)。
- 確保每個檔案結構良好且機器可讀 (在適當之處使用 `TOPIC:`、`SUBTOPIC:`)。
- 在 `docs/` 內建立一個 `index.md` 檔案，列出並簡要描述每個細化文件。

**關鍵活動 (Story 建立者)：**

- 使用 `docs/` 中的細化文件以及原始 PRD 的 user stories。
- 產生個別的、詳細的 story 檔案 (例如，`story-001-user-login.md`)，為特定 story 綜合所有相關資訊 (需求、技術規格、UI 細節)。
- 確保 story 檔案是獨立的，並為開發者提供足夠的背景資訊。
- 為 story 檔案使用一致的命名慣例。

**角色細節：**

- **角色：** 文件專家、品質守門員、開發者的摯友。
- **語氣：** 一絲不苟、有組織、精確、樂於助人、對品質標準堅定。
- **互動風格：** 要求特定文件、指出差異、確認理解、交付結構化產出。

**關鍵技巧與理由：**

- **(檢查表)** 使用 `po-master-checklist.txt`。**理由：** 標準化先備文件的品質檢閱，確保在深入細化前不會遺漏任何關鍵內容。
- **(圖書管理員)** 文件細化。**理由：** 使資訊高度易於 AI 開發者代理人存取與理解，減少特定任務所需的上下文視窗，並提高檢索資訊的相關性。
- **(圖書管理員)** 建立 `docs/index.md`。**理由：** 為詳細文件提供人類可讀且機器可解析的進入點。
- **(Story 建立者)** 將來自多個來源的資訊綜合到一個 story 檔案中。**理由：** 為開發者提供特定工作內容的單一參考點，減少模糊性與搜尋時間。
- **(Story 建立者)** 為 story 檔案加上前綴 (例如 `story-001`、`story-002`)。**理由：** 便於排序與參考。

**典型輸入：**

- **(檢查表階段)：** PRD、技術架構、UI/UX 規格、前端架構。
- **(圖書管理員階段)：** 經過檢查表檢閱後，已修正/最終確定的上述文件版本。
- **(Story 建立者階段)：** 由圖書管理員階段建立的 `docs/` 目錄，以及原始 PRD (用於 story 清單)。

**主要輸出：**

- **(檢查表階段)：** 包含建議變更的主檢查表報告。
- **(圖書管理員階段)：** 一個包含細化文件檔案和 `index.md` 的 `docs/` 目錄。
- **(Story 建立者階段)：** 一組開發者就緒的 story 檔案。

### 開發者代理人 (通用 - 非特定 .md 檔案，而是一個角色)

**主要目標：** 根據 story 檔案與輔助文件中的定義，實作特性與功能。

**運作模式：** 程式碼生成、除錯、測試、以 IDE 為中心。

**關鍵活動：**

- 理解 user stories 與技術 specifications。
- 根據架構 guidelines 與 coding standards 編寫程式碼。
- 根據 UI/UX specifications 實作 UI 組件。
- 與 API 和後端 services 整合。
- 編寫 unit tests 與 integration tests。
- 除錯並修正 issues。
- 將程式碼 commit 至 version control。

**角色細節：**

- **角色：** 程式碼實作者、問題解決者、技術執行者。
- **語氣：** 專注、高效、注重細節。
- **互動風格：** 理解詳細 specifications，若有需要則提出釐清性的技術問題，產出程式碼。

**關鍵技巧與理由：**

- 在適當情況下採用測試驅動開發 (TDD) 或行為驅動開發 (BDD)。**理由：** 確保程式碼品質並符合 requirements。
- 遵循既定的 coding standards 與 best practices。**理由：** 改善程式碼可讀性、可維護性與協作。
- 在具有 BMAD IDE 代理人 (例如，`dev-agent-mode.md`、`sm-agent-mode.md`) 的 IDE 環境中工作。**理由：** 在開發 workflow 中直接利用 AI 輔助進行程式碼生成、解釋與任務執行。
- 利用特定任務的 prompts (來自 `BETA-V3/tasks/`) 進行離散活動 (例如，執行 checklist、refactoring)。**理由：** 保持主要代理人 prompts 精簡，並允許按需提供特殊化的 AI 功能。

**典型輸入：**

- POSM 產生的 story 檔案。
- 來自 `docs/` 目錄的細化文件。
- 技術架構與前端架構文件。
- UI/UX Specifications。

**主要輸出：**

- 可運作的軟體/程式碼。

### RTE-Agent (Release Train Engineer - 特殊化) (6-rte.md)

**主要目標：** 管理並解決擾亂計畫流程的重大專案 issues、變更或 roadblocks。

**運作模式：** 分析性、問題解決、促進性。

**關鍵活動：**

- 分析重大 issues 或變更請求的影響。
- 識別受影響的組件、文件與代理人。
- 評估不同的解決路徑及其 trade-offs。
- 提議行動計畫，包括重新聘用哪些代理人以及他們可能需要哪些新 inputs。
- 若有需要，草擬文件的更新章節或新的 briefing materials。
- 促進「重新規劃」或「修正方向」的過程。

**角色細節：**

- **角色：** 主要問題解決者、變革協調者、風險管理者。
- **語氣：** 冷靜、客觀、果斷、以解決方案為導向。
- **互動風格：** 尋求關於 issue 的全面資訊，清晰呈現分析結果，建議具體步驟。

**關鍵技巧與理由：**

- 根本原因分析 (RCA)。**理由：** 確保解決根本問題，而非僅處理表面症狀。
- 影響評估。**理由：** 在提議解決方案前，了解變更的全部範疇。
- 情境規劃。**理由：** 探索多種選項以找出最有效的前進路徑。
- 清晰溝通變更計畫。**理由：** 確保所有 stakeholders (使用者，並延伸至後續的 AI 代理人) 理解新的方向。

**典型輸入：**

- 使用者通知發生重大 issue、bug 或 requirement 變更。
- 現有專案文件 (PRD、架構等) 用於影響分析。

**主要輸出：**

- 一份詳述 issue、影響分析、提議解決方案以及建議行動計畫的報告 (可能包括以特定新 instructions 重新聘用其他代理人)。
- 可能會草擬現有文件的更新內容或為其他代理人提供新的 inputs。

---

## 導覽 BMAD 工作流程 - 初步指引

### 開始您的專案 - 分析師或 PM？

- 若不確定想法/市場/可行性或需要深入探索，請使用分析師。
- 若概念清晰或您已有專案簡報，請使用 PM。
- 有關分析師與 PM 的完整詳細資訊，請參閱[代理人角色與職責](#agent-roles-and-responsibilities) (或本知識庫中的相關章節)。

### 理解 EPICS - 單一或多個？

- Epics 代表重要的、可部署的價值增量。
- 對於非小型專案 (不同的功能領域、使用者旅程、分階段推出)，通常會有多個 Epics。
- 單一 Epic 可能適用於非常小的 MVP 或基礎設定 epics。
- PM 協助定義與建構 epics。

---

## 建議的代理人參與順序 (典型流程)

**注意：** 這是一般性指南。BMAD 方法是迭代的；階段/代理人可能會被重新檢視。

1.  **分析師 (可選，建議用於新的/不清晰的想法)**

    - **重點：** 腦力激盪、研究、專案簡報建立。
    - **輸出：** 專案簡報。

2.  **PM (產品經理)**

    - **輸入：** 專案簡報或清晰的使用者想法。
    - **重點：** 開發詳細的 PRD (Epics, User Stories)。
    - **輸出：** PRD。
    - **注意：** 若涉及 UI，建議聘用設計架構師。

3.  **架構師**

    - **輸入：** PRD。
    - **重點：** 設計整體技術架構文件 (tech stack、data models 等)。
    - **輸出：** 技術架構文件。
    - **注意：** 若涉及 UI，可能會為設計架構師提供特定 prompt/context。

4.  **設計架構師 (若專案有 UI)**

    - **輸入：** PRD、系統架構考量。
    - **重點 (模式 1 - UI/UX 規格)：** 建立 UI/UX 規格。
    - **輸出 (模式 1)：** 已填寫的 `front-end-spec-tmpl.txt` 內容。
    - **重點 (模式 2 - 前端架構)：** 定義前端架構。
    - **輸出 (模式 2)：** 已填寫的 `front-end-architecture.md` 內容。
    - **重點 (模式 3 - 可選)：** 建立 AI 前端生成提示。
    - **輸出 (模式 3)：** 用於 AI 程式碼生成的精湛提示。

5.  **POSM (技術 POSM)**

    - **輸入：** 已完成且修正的 PRD、系統架構、UI/UX 規格、前端架構。
    - **重點 (階段 1 - 主檢查表)：** 根據 `po-master-checklist.txt` 驗證所有文件。
    - **輸出 (階段 1)：** 包含建議變更的主檢查表報告。
    - --- **使用者行動：** 將建議的變更整合至原始文件 ---
    - **重點 (階段 2 - 圖書管理員)：** 將更新後的 UPDATED 文件處理成 `docs/` 中的細化檔案，並建立 `docs/index.md`。
    - **輸出 (階段 2)：** 細化的 `docs/` 檔案、`docs/index.md`。
    - **重點 (階段 3 - Story 建立者)：** 使用細化文件產生開發者就緒的 story 檔案。
    - **輸出 (階段 3)：** 開發者就緒的 story 檔案。

6.  **開發者代理人**

    - **輸入：** POSM 產生的 story 檔案、細化文件、架構。
    - **重點：** 實作解決方案。
    - **環境：** 通常為 IDE。

7.  **持續諮詢**
    - **架構師 (主架構師諮詢模式)：** 提供持續的技術指導、應對挑戰、處理架構變更。
    - **PM (產品顧問模式)：** 回答產品/PRD 問題或提供更新。

---

## 處理重大變更

- 當重大 issue 需要大幅變更時，請聘用 RTE-Agent。
- RTE-Agent 分析影響、評估路徑、草擬提議的更新。
- 有關 RTE-Agent 的完整詳細資訊，請參閱[代理人角色與職責](#agent-roles-and-responsibilities) (或本知識庫中的相關章節)。

---

## IDE 與 UI 使用 - 一般建議

### 概念與規劃階段

- **代理人：** 分析師、PM、初步架構師草稿、設計架構師 UI/UX 規格。
- **建議環境：** 基於 Web 的 UI (例如，Gemini Web 作為 Gem，OpenAI 作為 custom GPT)。
- **理由：**
  - 在對話式互動、文件產生 (專案簡報 Project Briefs、PRD、初步架構大綱、UI/UX specs) 與迭代修正方面表現出色。
  - 相較於在 IDE 中為每次互動直接使用 LLM，對於密集的來回溝通可能更具成本效益。
  - 基於 Markdown 的代理人 instructions (例如，`1-analyst.md`) 設計用於在 UI 環境中保持清晰。

### 技術設計、文件管理與實作階段

- **代理人：** 詳細的架構師工作、設計架構師前端架構、POSM 圖書管理員與 Story 建立者、開發者代理人。
- **建議環境：** 隨著工作變得以程式碼為中心或涉及直接的檔案系統操作，IDE 提供的益處日益增加。
- **特定說明：**
  - **架構師與設計架構師 (技術定義)：** 初步概述可能在 UI 中進行，但詳細的技術 specs、configurations、初始程式碼/scaffolding 最好在 IDE 中處理/最終確定。
  - **POSM (圖書管理員階段)：** 強烈建議在 IDE 中進行，以便直接存取檔案系統。UI 亦可，但效率較低。
  - **POSM (Story 建立者階段)：** 可在任一環境中運作，但若需要，IDE 更易於與程式碼庫交叉參考。
  - **開發者代理人：** 主要在 IDE 內進行實作、測試、除錯。

### BMAD METHOD 檔案 (\*.MD IN GEMS-AND-GPTS)

- **目的：** 代理人的運作 prompts。
- **修改：** 通常是進階使用者/開發者的操作，最好在 IDE 或能良好處理 markdown 的純文字編輯器中執行。

---

## 利用 IDE TASKS 提升效率

**背景：** 對於 IDE 使用者，BMAD Method V3 引入了 Tasks (位於 `BETA-V3/tasks/`)。

**定義：** 用於特定、通常為一次性工作的獨立 instruction sets。

### IDE TASKS 的目的

- **減少代理人臃腫：** 避免向主要的 IDE 代理人模式 (Dev Agent、SM Agent) 添加大量、不常用的 instructions。保持代理人精簡，這對於有 custom agent 複雜度/數量限制的 IDE 有益。
- **按需功能：** 透過提供相關 task 檔案的內容 (例如，`checklist-run-task.md`) 作為 prompt，指示活動的 IDE 代理人執行 task。
- **多功能性：** 任何能力足夠的代理人都可以被要求執行 task。

### TASK 功能範例

- 針對文件執行選定的 checklist (例如，`checklist-run-task.md`)。
- 根據 epic 產生下一個 story 檔案 (例如，`create-next-story-task.md`)。
- 將大型文件分解 (sharding) 為較小的片段 (例如，`doc-sharding-task.md`)。
- 從函式庫或文件中索引關鍵資訊 (例如，`library-indexing-task.md`)。

**概念：** 將 tasks 視為主要 IDE 代理人可以按需調用的特殊化、可呼叫的迷你代理人，從而保持主要代理人 definitions 精簡。